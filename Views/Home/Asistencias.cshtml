@{
    ViewData["Title"] = ViewBag.ClaseId != null ? $"Asistencias - Clase {ViewBag.ClaseId}" : "Todas las Asistencias";
    ViewData["Subtitle"] = "Listado de asistencias registradas en el sistema";
}

<div class="card">
    <div class="card-header">
        <div class="flex justify-between items-center">
            <div>
                <h2 class="card-title">
                    @(ViewBag.ClaseId != null ? $"Asistencias - Clase {ViewBag.ClaseId}" : "Todas las Asistencias")
                </h2>
                <p class="card-description">Registro completo de asistencias</p>
            </div>
            <div class="flex gap-2">
                @if (ViewBag.ClaseId != null)
                {
                    <a href="/api/asistencias/clase/@ViewBag.ClaseId/csv" class="btn btn-success btn-sm">Descargar CSV</a>
                    <a href="/" class="btn btn-secondary btn-sm">Volver al Dashboard</a>
                }
                else
                {
                    <a href="/api/asistencias/csv" class="btn btn-success btn-sm">Descargar CSV</a>
                    <a href="/" class="btn btn-secondary btn-sm">Dashboard</a>
                }
            </div>
        </div>
    </div>

    <div id="asistenciasList">
        <div class="loading"><span class="spinner"></span>Cargando asistencias...</div>
    </div>
</div>

<!-- Filtros -->
<div class="card mt-4">
    <div class="card-header">
        <h3 class="card-title">Filtros</h3>
    </div>
    
    <div class="grid grid-3">
        <div class="form-group">
            <label class="form-label" for="filtroClase">Filtrar por Clase</label>
            <select id="filtroClase" class="form-input">
                <option value="">Todas las clases</option>
            </select>
        </div>
        
        <div class="form-group">
            <label class="form-label" for="filtroMetodo">Filtrar por Método</label>
            <select id="filtroMetodo" class="form-input">
                <option value="">Todos los métodos</option>
                <option value="PROFESOR_ESCANEA">Profesor Escanea</option>
                <option value="ALUMNO_ESCANEA">Alumno Escanea</option>
            </select>
        </div>
        
        <div class="form-group">
            <label class="form-label" for="filtroFecha">Filtrar por Fecha</label>
            <input type="date" id="filtroFecha" class="form-input">
        </div>
    </div>
    
    <button type="button" class="btn btn-primary" onclick="aplicarFiltros()">Aplicar Filtros</button>
    <button type="button" class="btn btn-secondary" onclick="limpiarFiltros()">Limpiar Filtros</button>
</div>

@section Scripts {
<script>
    let asistenciasOriginales = [];
    
    // Cargar lista de clases para el filtro
    async function cargarClasesParaFiltro() {
        try {
            const clases = await Utils.request('/api/clases');
            const select = document.getElementById('filtroClase');
            clases.forEach(clase => {
                const option = document.createElement('option');
                option.value = clase.id;
                option.textContent = `${clase.id} - ${clase.asignatura}`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar clases:', error);
        }
    }
    
    // Aplicar filtros
    function aplicarFiltros() {
        const filtroClase = document.getElementById('filtroClase').value;
        const filtroMetodo = document.getElementById('filtroMetodo').value;
        const filtroFecha = document.getElementById('filtroFecha').value;
        
        let asistenciasFiltradas = [...asistenciasOriginales];
        
        if (filtroClase) {
            asistenciasFiltradas = asistenciasFiltradas.filter(a => 
                a.claseId.toString() === filtroClase
            );
        }
        
        if (filtroMetodo) {
            asistenciasFiltradas = asistenciasFiltradas.filter(a => 
                a.metodo === filtroMetodo
            );
        }
        
        if (filtroFecha) {
            const fechaFiltro = new Date(filtroFecha);
            asistenciasFiltradas = asistenciasFiltradas.filter(a => {
                const fechaAsistencia = new Date(a.marcadaUtc);
                return fechaAsistencia.toDateString() === fechaFiltro.toDateString();
            });
        }
        
        const container = document.getElementById('asistenciasList');
        window.asistenciasManager.renderAsistencias(container, asistenciasFiltradas, @ViewBag.ClaseId);
    }
    
    // Limpiar filtros
    function limpiarFiltros() {
        document.getElementById('filtroClase').value = '';
        document.getElementById('filtroMetodo').value = '';
        document.getElementById('filtroFecha').value = '';
        
        const container = document.getElementById('asistenciasList');
        window.asistenciasManager.renderAsistencias(container, asistenciasOriginales, @ViewBag.ClaseId);
    }
    
    // Sobrescribir el método de renderizado para guardar los datos originales
    const originalLoadAsistencias = window.asistenciasManager.loadAsistencias.bind(window.asistenciasManager);
    window.asistenciasManager.loadAsistencias = async function() {
        const container = document.getElementById('asistenciasList');
        if (!container) return;

        const claseId = this.getClaseIdFromUrl();
        const endpoint = claseId ? `/api/asistencias/clase/${claseId}` : '/api/asistencias';

        Utils.showLoading(container);

        try {
            const asistencias = await Utils.request(endpoint);
            asistenciasOriginales = asistencias; // Guardar datos originales
            this.renderAsistencias(container, asistencias, claseId);
        } catch (error) {
            container.innerHTML = `<div class="status status-error">Error al cargar asistencias: ${error.message}</div>`;
        }
    };
    
    // Cargar clases para filtro al inicializar
    document.addEventListener('DOMContentLoaded', () => {
        cargarClasesParaFiltro();
    });
</script>
}