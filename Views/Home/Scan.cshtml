@{
    ViewData["Title"] = "Registro de Asistencia";
    ViewData["Subtitle"] = $"Clase {ViewBag.ClaseId}";
}

<div class="card" style="max-width: 600px; margin: 0 auto;">
    <div class="card-header text-center">
        <h2 class="card-title">Registrar Asistencia</h2>
        <p class="card-description">Ingresa tu ID de alumno para marcar tu asistencia</p>
    </div>

    <form id="asistenciaForm">
        <div class="form-group">
            <label class="form-label" for="alumnoId">ID del Alumno</label>
            <input type="number" id="alumnoId" name="alumnoId" class="form-input" min="1" required 
                   placeholder="Ingresa tu ID de alumno" autofocus>
        </div>
        
        <button type="submit" class="btn btn-primary">Marcar Asistencia</button>
    </form>

    <div id="mensaje" class="mt-4"></div>

    <div class="qr-info mt-4">
        <p><strong>Clase ID:</strong> @ViewBag.ClaseId</p>
        <p class="text-xs">Token de seguridad activo</p>
    </div>
</div>

@section Scripts {
<script>
    let currentNonce = "@ViewBag.Nonce";
    const claseId = @ViewBag.ClaseId;

    async function renovarNonce() {
        const r = await fetch(`/api/clases/${claseId}/qr`);
        if (!r.ok) throw new Error('No se pudo renovar token');
        const j = await r.json();
        const parts = (j.url || '').split('nonce=');
        if (parts.length < 2) throw new Error('URL sin nonce');
        currentNonce = parts[1];
        return j;
    }

    async function marcarAsistencia(reintentado = false) {
        const alumnoId = document.getElementById('alumnoId').value;
        const mensajeDiv = document.getElementById('mensaje');
        
        if (!alumnoId) {
            mensajeDiv.innerHTML = '<div class="status status-error">Por favor ingresa tu ID de alumno</div>';
            return;
        }

        try {
            const response = await fetch('/api/asistencias/alumno-scan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    alumnoId: parseInt(alumnoId),
                    claseId: claseId,
                    nonce: currentNonce
                })
            });

            const result = await response.json();
            
            if (response.ok) {
                mensajeDiv.innerHTML = `<div class="status status-success">${result.mensaje || 'Asistencia registrada exitosamente'}</div>`;
                document.getElementById('asistenciaForm').reset();
            } else {
                throw new Error(result.message || 'Error al registrar asistencia');
            }
            
        } catch (error) {
            if (!reintentado && /nonce/i.test(error.message)) {
                try {
                    await renovarNonce();
                    await marcarAsistencia(true);
                    return;
                } catch {
                    mensajeDiv.innerHTML = '<div class="status status-error">El QR expiró. Vuelve a escanear el código QR.</div>';
                    return;
                }
            }
            mensajeDiv.innerHTML = `<div class="status status-error">Error: ${error.message}</div>`;
        }
    }

    // Evento del formulario
    document.getElementById('asistenciaForm').addEventListener('submit', (e) => {
        e.preventDefault();
        marcarAsistencia(false);
    });

    // Renovar nonce al cargar para minimizar expiraciones
    (async () => {
        try { 
            await renovarNonce(); 
        } catch(_) {
            // Si falla, usa el nonce inicial de la URL
        }
    })();
</script>
}

<style>
    .qr-info {
        background: var(--background);
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
    
    .status {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        margin: 1rem 0;
    }

    .status-success {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .status-error {
        background: #fee2e2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .status-warning {
        background: #fef3c7;
        color: #d97706;
        border: 1px solid #fed7aa;
    }
</style>