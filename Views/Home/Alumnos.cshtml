@{
    ViewData["Title"] = "Gestión de Estudiantes";
    ViewData["Subtitle"] = "Administra estudiantes, genera códigos QR y controla registros";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - QuantumAttend</title>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <link href="~/css/styles.css" rel="stylesheet" />
    <style>
        :root {
            --primary: #667eea;
            --primary-dark: #5a67d8;
            --secondary: #764ba2;
            --success: #10b981;
            --success-dark: #059669;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;

            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #f1f5f9;
            --surface: #ffffff;
            --surface-hover: #f8fafc;

            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --text-tertiary: #94a3b8;

            --border: #e2e8f0;
            --border-hover: #cbd5e1;

            --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);

            --radius-sm: 0.375rem;
            --radius: 0.5rem;
            --radius-md: 0.75rem;
            --radius-lg: 1rem;
            --radius-xl: 1.5rem;
            --radius-2xl: 2rem;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-secondary);
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Section */
        .page-header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 3rem 2rem;
            border-radius: var(--radius-2xl);
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            opacity: 0.3;
        }

        .page-header-content {
            position: relative;
            z-index: 1;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, rgba(255,255,255,1), rgba(255,255,255,0.8));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .page-subtitle {
            font-size: 1.125rem;
            opacity: 0.9;
            font-weight: 400;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: var(--radius-xl);
            padding: 1.5rem;
            box-shadow: var(--shadow-sm);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            border-color: var(--border-hover);
        }

        .stat-header {
            display: flex;
            items-center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .stat-icon {
            width: 3rem;
            height: 3rem;
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }

        .stat-icon.primary { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: white; }
        .stat-icon.success { background: linear-gradient(135deg, var(--success), var(--success-dark)); color: white; }
        .stat-icon.warning { background: linear-gradient(135deg, var(--warning), #d97706); color: white; }
        .stat-icon.info { background: linear-gradient(135deg, var(--info), #2563eb); color: white; }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 800;
            color: var(--text-primary);
            line-height: 1;
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            font-weight: 500;
        }

        .stat-change {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: var(--radius);
            margin-top: 0.5rem;
            display: inline-block;
        }

        .stat-change.positive { background: rgba(16, 185, 129, 0.1); color: var(--success); }
        .stat-change.neutral { background: rgba(100, 116, 139, 0.1); color: var(--text-secondary); }

        /* Controls Section */
        .controls-section {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: var(--radius-xl);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-sm);
        }

        .controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .controls-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .controls-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .search-container {
            position: relative;
            min-width: 300px;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 3rem;
            border: 2px solid var(--border);
            border-radius: var(--radius-lg);
            font-size: 0.875rem;
            transition: all 0.2s ease;
            background: var(--bg-primary);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-tertiary);
            width: 1.25rem;
            height: 1.25rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--radius-lg);
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            white-space: nowrap;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success), var(--success-dark));
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning), #d97706);
            color: white;
        }

        .btn-secondary {
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 1px solid var(--border);
        }

        .btn-ghost {
            background: transparent;
            color: var(--text-secondary);
            border: 1px solid var(--border);
        }

        .btn-ghost:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
        }

        /* Students Grid */
        .students-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
            padding: 0.5rem;
        }

        @@media (min-width: 1200px) {
            .students-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @@media (min-width: 1600px) {
            .students-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        .student-card {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: var(--radius-xl);
            padding: 1.5rem;
            box-shadow: var(--shadow-sm);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .student-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-lg);
            border-color: var(--primary);
        }

        .student-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        .student-header {
            display: flex;
            items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .student-avatar {
            width: 3.5rem;
            height: 3.5rem;
            border-radius: var(--radius-lg);
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            flex-shrink: 0;
        }

        .student-info {
            flex: 1;
            min-width: 0;
        }

        .student-name {
            font-size: 1.125rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
            line-height: 1.3;
        }

        .student-code {
            font-size: 0.875rem;
            color: var(--text-secondary);
            font-weight: 500;
            font-family: 'JetBrains Mono', 'Monaco', 'Consolas', monospace;
        }

        .student-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: var(--bg-secondary);
            border-radius: var(--radius-md);
        }

        .meta-item {
            text-align: center;
        }

        .meta-label {
            font-size: 0.75rem;
            color: var(--text-tertiary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .meta-value {
            font-size: 0.875rem;
            color: var(--text-primary);
            font-weight: 600;
        }

        .student-actions {
            display: flex;
            gap: 0.75rem;
        }

        .action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            background: var(--surface);
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .action-btn:hover {
            border-color: var(--primary);
            color: var(--primary);
            background: rgba(102, 126, 234, 0.05);
            transform: translateY(-1px);
        }

        .action-btn.qr-available {
            border-color: var(--success);
            color: var(--success);
            background: rgba(16, 185, 129, 0.05);
        }

        .action-btn.qr-available:hover {
            background: rgba(16, 185, 129, 0.1);
        }

        .action-btn.qr-missing {
            border-color: var(--warning);
            color: var(--warning);
            background: rgba(245, 158, 11, 0.05);
        }

        .action-btn.qr-missing:hover {
            background: rgba(245, 158, 11, 0.1);
        }

        /* Loading States */
        .loading-container {
            display: flex;
            items-center;
            justify-content: center;
            padding: 4rem;
            text-align: center;
        }

        .loading-spinner {
            width: 2rem;
            height: 2rem;
            border: 3px solid var(--border);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
        }

        .empty-icon {
            width: 4rem;
            height: 4rem;
            margin: 0 auto 1.5rem;
            color: var(--text-tertiary);
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .empty-description {
            color: var(--text-secondary);
            margin-bottom: 2rem;
        }

        /* Create Student Form */
        .create-form {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: var(--radius-xl);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-sm);
        }

        .form-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .form-icon {
            width: 3rem;
            height: 3rem;
            border-radius: var(--radius-lg);
            background: linear-gradient(135deg, var(--success), var(--success-dark));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .form-input {
            padding: 0.75rem 1rem;
            border: 2px solid var(--border);
            border-radius: var(--radius-md);
            font-size: 0.875rem;
            transition: all 0.2s ease;
            background: var(--bg-primary);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .page-header {
                padding: 2rem 1.5rem;
                margin-bottom: 1.5rem;
            }

            .page-title {
                font-size: 2rem;
            }

            .controls-header {
                flex-direction: column;
                align-items: stretch;
            }

            .controls-actions {
                justify-content: stretch;
            }

            .search-container {
                min-width: auto;
            }

            .students-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .form-actions {
                flex-direction: column;
            }

            .student-actions {
                flex-direction: column;
            }
        }

        @@media (max-width: 480px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .student-meta {
                flex-direction: column;
                gap: 1rem;
            }

            .meta-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                text-align: left;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Page Header -->
        <header class="page-header">
            <div class="page-header-content">
                <h1 class="page-title">Gestión de Estudiantes</h1>
                <p class="page-subtitle">Administra estudiantes, genera códigos QR y controla registros de asistencia</p>
            </div>
        </header>

        <!-- Statistics Cards -->
        <div class="stats-grid" id="statsGrid">
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon primary">
                        <i data-lucide="users"></i>
                    </div>
                </div>
                <div class="stat-value" id="totalStudents">0</div>
                <div class="stat-label">Total Estudiantes</div>
                <div class="stat-change neutral">Activos en el sistema</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon success">
                        <i data-lucide="qr-code"></i>
                    </div>
                </div>
                <div class="stat-value" id="studentsWithQR">0</div>
                <div class="stat-label">Con Código QR</div>
                <div class="stat-change positive" id="qrPercentage">100% disponibles</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon warning">
                        <i data-lucide="clock"></i>
                    </div>
                </div>
                <div class="stat-value" id="recentStudents">0</div>
                <div class="stat-label">Agregados Hoy</div>
                <div class="stat-change neutral">Nuevos registros</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon info">
                        <i data-lucide="activity"></i>
                    </div>
                </div>
                <div class="stat-value" id="activeClasses">0</div>
                <div class="stat-label">Clases Activas</div>
                <div class="stat-change positive">En este momento</div>
            </div>
        </div>

        <!-- Create Student Form -->
        <div class="create-form">
            <div class="form-header">
                <div class="form-icon">
                    <i data-lucide="user-plus"></i>
                </div>
                <div>
                    <h2 class="form-title">Crear Nuevo Estudiante</h2>
                    <p style="color: var(--text-secondary); font-size: 0.875rem;">Registra un estudiante y genera su QR automáticamente</p>
                </div>
            </div>

            <form id="createStudentForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label" for="studentCode">Código del Estudiante</label>
                        <input type="text" id="studentCode" class="form-input" placeholder="Ej: EST001" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="studentName">Nombre Completo</label>
                        <input type="text" id="studentName" class="form-input" placeholder="Ej: Juan Pérez García" required>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="clearForm">
                        <i data-lucide="x"></i>
                        Limpiar
                    </button>
                    <button type="submit" class="btn btn-success" id="submitBtn">
                        <i data-lucide="plus"></i>
                        Crear Estudiante
                    </button>
                </div>
            </form>
        </div>

        <!-- Controls Section -->
        <div class="controls-section">
            <div class="controls-header">
                <h2 class="controls-title">Lista de Estudiantes</h2>
                <div class="controls-actions">
                    <div class="search-container">
                        <i data-lucide="search" class="search-icon"></i>
                        <input type="text" class="search-input" placeholder="Buscar estudiantes..." id="searchInput">
                    </div>
                    <button class="btn btn-ghost" id="exportBtn">
                        <i data-lucide="download"></i>
                        Exportar
                    </button>
                    <button class="btn btn-warning" id="printQRBtn">
                        <i data-lucide="printer"></i>
                        Imprimir QRs
                    </button>
                    <button class="btn btn-primary" id="refreshBtn">
                        <i data-lucide="refresh-cw"></i>
                        Actualizar
                    </button>
                </div>
            </div>

            <!-- Students Grid -->
            <div id="studentsContainer">
                <div class="loading-container">
                    <div>
                        <div class="loading-spinner"></div>
                        <p style="color: var(--text-secondary);">Cargando estudiantes...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class StudentsManager {
            constructor() {
                this.students = [];
                this.filteredStudents = [];
                this.init();
            }

            async init() {
                console.log('🚀 Inicializando Students Manager...');

                await this.loadStudents();
                this.setupEventListeners();
                this.updateStats();

                if (window.lucide) {
                    lucide.createIcons();
                }

                console.log('✅ Students Manager inicializado');
            }

            async loadStudents() {
                try {
                    const response = await fetch('/api/alumnos');
                    if (!response.ok) throw new Error('Error al cargar estudiantes');

                    const data = await response.json();
                    this.students = Array.isArray(data) ? data : [];
                    this.filteredStudents = [...this.students];

                    console.log('📊 Estudiantes cargados:', this.students.length);

                    this.renderStudents();
                    this.updateStats();

                } catch (error) {
                    console.error('❌ Error cargando estudiantes:', error);
                    this.showError('Error al cargar los estudiantes. Por favor intenta nuevamente.');
                }
            }

            renderStudents() {
                const container = document.getElementById('studentsContainer');

                if (this.filteredStudents.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <i data-lucide="users" class="empty-icon"></i>
                            <h3 class="empty-title">No hay estudiantes</h3>
                            <p class="empty-description">Comienza agregando tu primer estudiante usando el formulario arriba</p>
                            <button class="btn btn-primary" onclick="document.getElementById('studentCode').focus()">
                                <i data-lucide="user-plus"></i>
                                Crear Primer Estudiante
                            </button>
                        </div>
                    `;
                    return;
                }

                const studentsHTML = this.filteredStudents.map(student => {
                    const hasQR = student.qrAlumnoBase64 && student.qrAlumnoBase64.trim() !== '';
                    const initials = student.nombre.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);

                    return `
                        <div class="student-card" data-id="${student.id}">
                            <div class="student-header">
                                <div class="student-avatar">${initials}</div>
                                <div class="student-info">
                                    <h3 class="student-name">${student.nombre}</h3>
                                    <p class="student-code">${student.codigo}</p>
                                </div>
                            </div>

                            <div class="student-meta">
                                <div class="meta-item">
                                    <div class="meta-label">ID</div>
                                    <div class="meta-value">#${student.id}</div>
                                </div>
                                <div class="meta-item">
                                    <div class="meta-label">Estado QR</div>
                                    <div class="meta-value" style="color: ${hasQR ? 'var(--success)' : 'var(--warning)'}">
                                        ${hasQR ? 'Disponible' : 'Pendiente'}
                                    </div>
                                </div>
                                <div class="meta-item">
                                    <div class="meta-label">Creado</div>
                                    <div class="meta-value">${new Date(student.fechaCreacion || Date.now()).toLocaleDateString()}</div>
                                </div>
                            </div>

                            <div class="student-actions">
                                <button class="action-btn ${hasQR ? 'qr-available' : 'qr-missing'}"
                                        onclick="studentsManager.${hasQR ? 'showQR' : 'generateQR'}(${student.id})"
                                        title="${hasQR ? 'Ver código QR' : 'Generar código QR'}">
                                    <i data-lucide="${hasQR ? 'qr-code' : 'refresh-cw'}"></i>
                                    ${hasQR ? 'Ver QR' : 'Generar QR'}
                                </button>
                                <button class="action-btn" onclick="studentsManager.editStudent(${student.id})" title="Editar estudiante">
                                    <i data-lucide="edit-3"></i>
                                    Editar
                                </button>
                                <button class="action-btn" onclick="studentsManager.deleteStudent(${student.id})" title="Eliminar estudiante">
                                    <i data-lucide="trash-2"></i>
                                    Eliminar
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');

                container.innerHTML = `<div class="students-grid">${studentsHTML}</div>`;

                if (window.lucide) {
                    lucide.createIcons();
                }
            }

            showQR(id) {
                const student = this.students.find(s => s.id === id);
                if (!student || !student.qrAlumnoBase64) {
                    this.showError('Código QR no disponible para este estudiante');
                    return;
                }

                const modal = document.createElement('div');
                modal.className = 'modal-overlay';
                modal.innerHTML = `
                    <div class="qr-modal-content">
                        <div class="qr-modal-header">
                            <div class="qr-modal-title">
                                <div class="qr-modal-icon">
                                    <i data-lucide="qr-code"></i>
                                </div>
                                <div>
                                    <h3>Código QR del Estudiante</h3>
                                    <p>${student.nombre}</p>
                                </div>
                            </div>
                            <button class="qr-modal-close">
                                <i data-lucide="x"></i>
                            </button>
                        </div>
                        <div class="qr-modal-body">
                            <div class="qr-display-container">
                                <div class="qr-image-wrapper">
                                    <img src="data:image/png;base64,${student.qrAlumnoBase64}"
                                         alt="QR de ${student.nombre}"
                                         class="qr-image">
                                    <div class="qr-scan-overlay">
                                        <div class="scan-line"></div>
                                    </div>
                                </div>
                                <div class="qr-info-card">
                                    <div class="qr-student-avatar">${student.nombre.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2)}</div>
                                    <div class="qr-student-details">
                                        <h4>${student.nombre}</h4>
                                        <p class="student-code-display">Código: ${student.codigo}</p>
                                        <p class="student-id-display">ID: #${student.id}</p>
                                        <div class="qr-status-badge">
                                            <i data-lucide="check-circle"></i>
                                            QR Activo
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="qr-modal-footer">
                            <button class="qr-action-btn secondary" onclick="studentsManager.downloadQR(${id})">
                                <i data-lucide="download"></i>
                                <span>Descargar PNG</span>
                            </button>
                            <button class="qr-action-btn warning" onclick="studentsManager.regenerateQR(${id})">
                                <i data-lucide="refresh-cw"></i>
                                <span>Regenerar QR</span>
                            </button>
                            <button class="qr-action-btn primary" onclick="this.closest('.modal-overlay').remove()">
                                <i data-lucide="eye"></i>
                                <span>Listo</span>
                            </button>
                        </div>
                    </div>
                `;

                modal.querySelector('.qr-modal-close').onclick = () => modal.remove();
                modal.onclick = (e) => e.target === modal && modal.remove();

                document.body.appendChild(modal);
                setTimeout(() => modal.classList.add('show'), 10);

                if (window.lucide) {
                    lucide.createIcons();
                }
            }

            async generateQR(id) {
                try {
                    const response = await fetch(`/api/alumnos/${id}/regenerate-qr`, {
                        method: 'POST'
                    });

                    if (!response.ok) throw new Error('Error generando QR');

                    const result = await response.json();

                    // Update student data
                    const student = this.students.find(s => s.id === id);
                    if (student) {
                        student.qrAlumnoBase64 = result.qrCode;
                    }

                    this.renderStudents();
                    this.updateStats();
                    this.showSuccess('Código QR generado exitosamente');

                    // Show QR automatically
                    setTimeout(() => this.showQR(id), 500);

                } catch (error) {
                    console.error('❌ Error generando QR:', error);
                    this.showError('Error al generar el código QR');
                }
            }

            async regenerateQR(id) {
                if (!confirm('¿Regenerar el código QR para este estudiante?')) return;

                // Close modal first
                document.querySelector('.modal-overlay')?.remove();

                await this.generateQR(id);
            }

            downloadQR(id) {
                const student = this.students.find(s => s.id === id);
                if (!student?.qrAlumnoBase64) return;

                const link = document.createElement('a');
                link.download = `QR-${student.codigo}-${student.nombre.replace(/[^a-z0-9]/gi, '_')}.png`;
                link.href = `data:image/png;base64,${student.qrAlumnoBase64}`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            async editStudent(id) {
                // TODO: Implement edit functionality
                this.showInfo('Función de edición en desarrollo');
            }

            async deleteStudent(id) {
                const student = this.students.find(s => s.id === id);
                if (!student) return;

                if (!confirm(`¿Eliminar al estudiante "${student.nombre}"?`)) return;

                try {
                    const response = await fetch(`/api/alumnos/${id}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Error al eliminar estudiante');

                    await this.loadStudents();
                    this.showSuccess('Estudiante eliminado exitosamente');

                } catch (error) {
                    console.error('❌ Error eliminando estudiante:', error);
                    this.showError('Error al eliminar el estudiante');
                }
            }

            setupEventListeners() {
                // Create form
                const createForm = document.getElementById('createStudentForm');
                createForm.addEventListener('submit', this.handleCreateStudent.bind(this));

                // Clear form
                document.getElementById('clearForm').addEventListener('click', () => {
                    createForm.reset();
                });

                // Search
                const searchInput = document.getElementById('searchInput');
                searchInput.addEventListener('input', this.debounce((e) => {
                    this.filterStudents(e.target.value);
                }, 300));

                // Action buttons
                document.getElementById('refreshBtn').addEventListener('click', () => this.loadStudents());
                document.getElementById('exportBtn').addEventListener('click', () => this.exportStudents());
                document.getElementById('printQRBtn').addEventListener('click', () => this.printQRs());
            }

            async handleCreateStudent(e) {
                e.preventDefault();

                const formData = new FormData(e.target);
                const submitBtn = document.getElementById('submitBtn');
                const originalText = submitBtn.innerHTML;

                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i data-lucide="loader" class="animate-spin"></i> Creando...';

                try {
                    const response = await fetch('/api/alumnos', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            codigo: document.getElementById('studentCode').value,
                            nombre: document.getElementById('studentName').value
                        })
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Error al crear estudiante');
                    }

                    e.target.reset();
                    await this.loadStudents();
                    this.showSuccess('Estudiante creado exitosamente');

                } catch (error) {
                    console.error('❌ Error creando estudiante:', error);
                    this.showError(error.message);
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                    if (window.lucide) lucide.createIcons();
                }
            }

            filterStudents(searchTerm) {
                const term = searchTerm.toLowerCase().trim();

                if (!term) {
                    this.filteredStudents = [...this.students];
                } else {
                    this.filteredStudents = this.students.filter(student =>
                        student.nombre.toLowerCase().includes(term) ||
                        student.codigo.toLowerCase().includes(term) ||
                        student.id.toString().includes(term)
                    );
                }

                this.renderStudents();
            }

            updateStats() {
                const total = this.students.length;
                const withQR = this.students.filter(s => s.qrAlumnoBase64 && s.qrAlumnoBase64.trim() !== '').length;
                const percentage = total > 0 ? Math.round((withQR / total) * 100) : 100;
                const today = new Date().toDateString();
                const todayStudents = this.students.filter(s =>
                    new Date(s.fechaCreacion || Date.now()).toDateString() === today
                ).length;

                document.getElementById('totalStudents').textContent = total;
                document.getElementById('studentsWithQR').textContent = withQR;
                document.getElementById('qrPercentage').textContent = `${percentage}% disponibles`;
                document.getElementById('recentStudents').textContent = todayStudents;
                document.getElementById('activeClasses').textContent = '0'; // TODO: Get from API
            }

            async exportStudents() {
                try {
                    const response = await fetch('/api/alumnos/export');
                    const data = await response.json();

                    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `estudiantes-${new Date().toISOString().split('T')[0]}.json`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);

                    this.showSuccess('Datos exportados exitosamente');
                } catch (error) {
                    this.showError('Error al exportar datos');
                }
            }

            async printQRs() {
                try {
                    const response = await fetch('/api/alumnos/print-qrs');
                    const printData = await response.json();

                    if (printData.length === 0) {
                        this.showError('No hay estudiantes para imprimir');
                        return;
                    }

                    // Create print window
                    const printWindow = window.open('', '_blank');
                    const printHtml = this.generatePrintHtml(printData);

                    printWindow.document.write(printHtml);
                    printWindow.document.close();

                    setTimeout(() => {
                        printWindow.print();
                    }, 1000);

                } catch (error) {
                    this.showError('Error preparando impresión');
                }
            }

            generatePrintHtml(students) {
                return `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Códigos QR de Estudiantes</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
                            .qr-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
                            .qr-card { border: 2px solid #ddd; border-radius: 8px; padding: 15px; text-align: center; background: #fafafa; break-inside: avoid; }
                            .qr-image { width: 150px; height: 150px; margin: 10px auto; border: 1px solid #ddd; }
                            .student-name { font-weight: bold; margin: 10px 0 5px 0; }
                            .student-code { color: #666; font-size: 12px; }
                            @@media print { body { margin: 0; } }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>Códigos QR de Estudiantes</h1>
                            <p>Sistema QuantumAttend - ${new Date().toLocaleDateString()}</p>
                        </div>
                        <div class="qr-grid">
                            ${students.map(student => `
                                <div class="qr-card">
                                    ${student.qrDataUrl ? `
                                        <img src="${student.qrDataUrl}" alt="QR ${student.nombre}" class="qr-image">
                                    ` : `
                                        <div class="qr-image" style="display:flex;align-items:center;justify-content:center;border:2px dashed #ccc;">
                                            <span style="color:#999;">QR no disponible</span>
                                        </div>
                                    `}
                                    <div class="student-name">${student.nombre}</div>
                                    <div class="student-code">Código: ${student.codigo}</div>
                                </div>
                            `).join('')}
                        </div>
                    </body>
                    </html>
                `;
            }

            showSuccess(message) {
                this.showToast(message, 'success');
            }

            showError(message) {
                this.showToast(message, 'error');
            }

            showInfo(message) {
                this.showToast(message, 'info');
            }

            showToast(message, type = 'info') {
                const toast = document.createElement('div');
                toast.className = `toast toast-${type}`;
                toast.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 1rem 1.5rem;
                    border-radius: var(--radius-lg);
                    color: white;
                    font-weight: 600;
                    z-index: 1000;
                    animation: slideIn 0.3s ease;
                    max-width: 400px;
                    box-shadow: var(--shadow-lg);
                `;

                const colors = {
                    success: 'var(--success)',
                    error: 'var(--danger)',
                    info: 'var(--info)',
                    warning: 'var(--warning)'
                };

                toast.style.background = colors[type] || colors.info;
                toast.textContent = message;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            window.studentsManager = new StudentsManager();
        });

        // Add modal and toast animations
        const style = document.createElement('style');
        style.textContent = `
            /* Modal Overlay */
            .modal-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.6);
                backdrop-filter: blur(8px);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000;
                opacity: 0;
                transition: all 0.3s ease;
                padding: 1rem;
            }

            .modal-overlay.show {
                opacity: 1;
            }

            /* Enhanced QR Modal */
            .qr-modal-content {
                background: var(--surface);
                border-radius: var(--radius-2xl);
                box-shadow: var(--shadow-xl);
                max-width: 600px;
                width: 100%;
                max-height: 90vh;
                overflow: hidden;
                border: 1px solid var(--border);
                transform: scale(0.9) translateY(20px);
                transition: all 0.3s ease;
            }

            .modal-overlay.show .qr-modal-content {
                transform: scale(1) translateY(0);
            }

            .qr-modal-header {
                display: flex;
                align-items: center;
                justify-content: space-between;
                padding: 2rem 2rem 1rem 2rem;
                border-bottom: 1px solid var(--border);
                background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
                color: white;
            }

            .qr-modal-title {
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .qr-modal-icon {
                width: 3rem;
                height: 3rem;
                border-radius: var(--radius-lg);
                background: rgba(255, 255, 255, 0.2);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.5rem;
            }

            .qr-modal-title h3 {
                margin: 0;
                font-size: 1.5rem;
                font-weight: 700;
            }

            .qr-modal-title p {
                margin: 0;
                opacity: 0.9;
                font-size: 0.875rem;
            }

            .qr-modal-close {
                background: rgba(255, 255, 255, 0.2);
                border: none;
                border-radius: var(--radius-md);
                width: 2.5rem;
                height: 2.5rem;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 1.25rem;
            }

            .qr-modal-close:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: scale(1.05);
            }

            .qr-modal-body {
                padding: 2rem;
            }

            .qr-display-container {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 2rem;
                align-items: center;
            }

            .qr-image-wrapper {
                position: relative;
                background: var(--bg-secondary);
                border-radius: var(--radius-xl);
                padding: 2rem;
                text-align: center;
            }

            .qr-image {
                width: 200px;
                height: 200px;
                border: 3px solid var(--border);
                border-radius: var(--radius-lg);
                background: white;
                box-shadow: var(--shadow-md);
            }

            .qr-scan-overlay {
                position: absolute;
                top: 2rem;
                left: 2rem;
                right: 2rem;
                bottom: 2rem;
                border: 2px dashed var(--primary);
                border-radius: var(--radius-lg);
                pointer-events: none;
                opacity: 0.3;
            }

            .scan-line {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, transparent, var(--primary), transparent);
                animation: scanMove 2s linear infinite;
            }

            .qr-info-card {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
            }

            .qr-student-avatar {
                width: 4rem;
                height: 4rem;
                border-radius: var(--radius-xl);
                background: linear-gradient(135deg, var(--primary), var(--secondary));
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 1.5rem;
                font-weight: 700;
                margin: 0 auto;
            }

            .qr-student-details {
                text-align: center;
            }

            .qr-student-details h4 {
                margin: 0 0 0.5rem 0;
                font-size: 1.25rem;
                font-weight: 700;
                color: var(--text-primary);
            }

            .student-code-display,
            .student-id-display {
                margin: 0.25rem 0;
                color: var(--text-secondary);
                font-size: 0.875rem;
                font-family: 'JetBrains Mono', 'Monaco', 'Consolas', monospace;
            }

            .qr-status-badge {
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
                background: rgba(16, 185, 129, 0.1);
                color: var(--success);
                padding: 0.5rem 1rem;
                border-radius: var(--radius-lg);
                font-size: 0.875rem;
                font-weight: 600;
                margin-top: 1rem;
            }

            .qr-modal-footer {
                display: flex;
                gap: 1rem;
                padding: 1.5rem 2rem 2rem 2rem;
                background: var(--bg-secondary);
            }

            .qr-action-btn {
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
                padding: 1rem;
                border: none;
                border-radius: var(--radius-lg);
                font-size: 0.875rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                text-decoration: none;
            }

            .qr-action-btn:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-lg);
            }

            .qr-action-btn.secondary {
                background: var(--bg-tertiary);
                color: var(--text-secondary);
                border: 1px solid var(--border);
            }

            .qr-action-btn.secondary:hover {
                background: var(--surface);
                color: var(--text-primary);
            }

            .qr-action-btn.warning {
                background: linear-gradient(135deg, var(--warning), #d97706);
                color: white;
            }

            .qr-action-btn.primary {
                background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                color: white;
            }

            /* Responsive QR Modal */
            @@media (max-width: 768px) {
                .qr-display-container {
                    grid-template-columns: 1fr;
                    gap: 1.5rem;
                }

                .qr-image {
                    width: 150px;
                    height: 150px;
                }

                .qr-modal-footer {
                    flex-direction: column;
                }

                .qr-modal-header {
                    padding: 1.5rem;
                }

                .qr-modal-body {
                    padding: 1.5rem;
                }
            }

            /* Animations */
            @@keyframes scanMove {
                0% { transform: translateY(0); }
                100% { transform: translateY(200px); }
            }

            @@keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }

            @@keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>