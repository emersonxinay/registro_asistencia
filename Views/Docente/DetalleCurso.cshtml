@model CursoDetalleCompletoViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Detalle del Curso";
}

<div class="curso-detalle-container">
    <!-- Header del Curso -->
    <div class="curso-header">
        <div class="curso-info">
            <div class="curso-titulo">
                <h1>@Model.Nombre</h1>
                <span class="curso-codigo">@Model.Codigo</span>
                @if (Model.EsPropietario)
                {
                    <span class="badge propietario">Propietario</span>
                }
                else
                {
                    <span class="badge colaborador">Colaborador</span>
                }
            </div>
            @if (!string.IsNullOrEmpty(Model.Descripcion))
            {
                <p class="curso-descripcion">@Model.Descripcion</p>
            }
        </div>
        <div class="curso-stats">
            <div class="stat-item">
                <span class="stat-number">@Model.Ramos.Count</span>
                <span class="stat-label">Ramos</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">@Model.Estudiantes.Count</span>
                <span class="stat-label">Estudiantes</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">@Model.Ramos.Sum(r => r.ClasesActivas)</span>
                <span class="stat-label">Clases Activas</span>
            </div>
        </div>
    </div>

    <!-- Navegación por pestañas -->
    <div class="tabs-navigation">
        <button class="tab-button active" data-tab="ramos">
            <i class="fas fa-book"></i>
            Ramos (@Model.Ramos.Count)
        </button>
        <button class="tab-button" data-tab="estudiantes">
            <i class="fas fa-users"></i>
            Estudiantes (@Model.Estudiantes.Count)
        </button>
        <button class="tab-button" data-tab="estadisticas">
            <i class="fas fa-chart-bar"></i>
            Estadísticas
        </button>
    </div>

    <!-- Contenido de las pestañas -->
    <div class="tabs-content">
        <!-- Pestaña de Ramos -->
        <div class="tab-content active" id="ramos">
            <div class="section-header">
                <h2>Ramos del Curso</h2>
                @if (Model.EsPropietario)
                {
                    <a href="@Url.Action("CrearRamo", "Docente", new { cursoId = Model.Id })" class="btn btn-primary">
                        <i class="fas fa-plus"></i>
                        Agregar Ramo
                    </a>
                }
            </div>

            @if (Model.Ramos.Any())
            {
                <div class="ramos-grid">
                    @foreach (var ramo in Model.Ramos)
                    {
                        <div class="ramo-card">
                            <div class="ramo-header">
                                <h3>@ramo.Nombre</h3>
                                <span class="ramo-codigo">@ramo.Codigo</span>
                            </div>
                            <div class="ramo-stats">
                                <div class="ramo-stat">
                                    <i class="fas fa-chalkboard-teacher"></i>
                                    <span>@ramo.TotalClases clases totales</span>
                                </div>
                                <div class="ramo-stat @(ramo.ClasesActivas > 0 ? "active" : "")">
                                    <i class="fas fa-play-circle"></i>
                                    <span>@ramo.ClasesActivas clases activas</span>
                                </div>
                            </div>
                            <div class="ramo-actions">
                                <a href="@Url.Action("DetalleRamo", "Docente", new { id = ramo.Id })" class="btn btn-outline">
                                    Ver Detalle
                                </a>
                                <a href="@Url.Action("CrearClase", "Workflow", new { cursoId = Model.Id, ramoId = ramo.Id })" class="btn btn-primary">
                                    Nueva Clase
                                </a>
                                @if (Model.EsPropietario)
                                {
                                    <div class="ramo-admin-actions">
                                        <a href="/docente/ramos/@ramo.Id/editar" class="btn-icon edit" title="Editar Ramo">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn-icon delete" title="Eliminar Ramo" onclick="eliminarRamo(@ramo.Id, '@ramo.Nombre')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-book-open"></i>
                    <h3>No hay ramos creados</h3>
                    <p>Este curso aún no tiene ramos asignados.</p>
                    @if (Model.EsPropietario)
                    {
                        <a href="@Url.Action("CrearRamo", "Docente", new { cursoId = Model.Id })" class="btn btn-primary">
                            Crear Primer Ramo
                        </a>
                    }
                </div>
            }
        </div>

        <!-- Pestaña de Estudiantes -->
        <div class="tab-content" id="estudiantes">
            <div class="section-header">
                <h2>Estudiantes Inscritos</h2>
                @if (Model.EsPropietario)
                {
                    <a href="@Url.Action("GestionarEstudiantes", "Docente", new { cursoId = Model.Id })" class="btn btn-primary">
                        <i class="fas fa-user-plus"></i>
                        Gestionar Estudiantes
                    </a>
                }
            </div>

            @if (Model.Estudiantes.Any())
            {
                <div class="estudiantes-table">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Nombre</th>
                                <th>Fecha de Inscripción</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var estudiante in Model.Estudiantes.OrderBy(e => e.Nombre))
                            {
                                <tr>
                                    <td>
                                        <span class="estudiante-codigo">@estudiante.Codigo</span>
                                    </td>
                                    <td>
                                        <div class="estudiante-info">
                                            <strong>@estudiante.Nombre</strong>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="fecha-inscripcion">@estudiante.FechaInscripcion.ToString("dd/MM/yyyy")</span>
                                    </td>
                                    <td>
                                        <span class="badge activo">Activo</span>
                                    </td>
                                    <td>
                                        <div class="acciones-estudiante">
                                            <a href="@Url.Action("PerfilEstudiante", "Docente", new { id = estudiante.Id })" class="btn-icon" title="Ver Perfil">
                                                <i class="fas fa-user"></i>
                                            </a>
                                            <a href="@Url.Action("AsistenciasEstudiante", "Docente", new { estudianteId = estudiante.Id, cursoId = Model.Id })" class="btn-icon" title="Ver Asistencias">
                                                <i class="fas fa-chart-line"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-users"></i>
                    <h3>No hay estudiantes inscritos</h3>
                    <p>Este curso aún no tiene estudiantes inscritos.</p>
                    @if (Model.EsPropietario)
                    {
                        <a href="@Url.Action("GestionarEstudiantes", "Docente", new { cursoId = Model.Id })" class="btn btn-primary">
                            Inscribir Estudiantes
                        </a>
                    }
                </div>
            }
        </div>

        <!-- Pestaña de Estadísticas -->
        <div class="tab-content" id="estadisticas">
            <div class="section-header">
                <h2>Estadísticas del Curso</h2>
            </div>

            <div class="estadisticas-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <div class="stat-details">
                        <h3>@Model.Ramos.Count</h3>
                        <p>Ramos Totales</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <div class="stat-details">
                        <h3>@Model.Ramos.Sum(r => r.TotalClases)</h3>
                        <p>Clases Totales</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-play-circle"></i>
                    </div>
                    <div class="stat-details">
                        <h3>@Model.Ramos.Sum(r => r.ClasesActivas)</h3>
                        <p>Clases Activas</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-details">
                        <h3>@Model.Estudiantes.Count</h3>
                        <p>Estudiantes</p>
                    </div>
                </div>
            </div>

            @if (Model.Ramos.Any())
            {
                <div class="ramos-estadisticas">
                    <h3>Estadísticas por Ramo</h3>
                    <div class="ramos-stats-table">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Ramo</th>
                                    <th>Clases Totales</th>
                                    <th>Clases Activas</th>
                                    <th>Progreso</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ramo in Model.Ramos.OrderBy(r => r.Nombre))
                                {
                                    <tr>
                                        <td>
                                            <strong>@ramo.Nombre</strong>
                                            <br><small>@ramo.Codigo</small>
                                        </td>
                                        <td>@ramo.TotalClases</td>
                                        <td>@ramo.ClasesActivas</td>
                                        <td>
                                            @{
                                                var completadas = ramo.TotalClases - ramo.ClasesActivas;
                                                var progreso = ramo.TotalClases > 0 ? (completadas * 100 / ramo.TotalClases) : 0;
                                            }
                                            <div class="progress-bar">
                                                <div class="progress-fill" style="width: @(progreso)%"></div>
                                            </div>
                                            <small>@(progreso)% completado</small>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Acciones del curso -->
    <div class="curso-actions">
        <a href="@Url.Action("Cursos", "Docente")" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Volver a Cursos
        </a>
        
        @if (Model.EsPropietario)
        {
            <div class="acciones-propietario">
                <a href="@Url.Action("EditarCurso", "Docente", new { id = Model.Id })" class="btn btn-outline">
                    <i class="fas fa-edit"></i>
                    Editar Curso
                </a>
                <a href="@Url.Action("ConfiguracionCurso", "Docente", new { id = Model.Id })" class="btn btn-outline">
                    <i class="fas fa-cog"></i>
                    Configuración
                </a>
            </div>
        }
    </div>
</div>

<style>
.curso-detalle-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.curso-header {
    background: linear-gradient(135deg, var(--primary-color, #4CAF50) 0%, var(--secondary-color, #45a049) 100%);
    color: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.curso-titulo {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.curso-titulo h1 {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 600;
}

.curso-codigo {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 500;
}

.badge {
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.875rem;
    font-weight: 500;
}

.badge.propietario {
    background-color: #ffc107;
    color: #000;
}

.badge.colaborador {
    background-color: #17a2b8;
    color: white;
}

.curso-descripcion {
    margin: 0;
    font-size: 1.1rem;
    opacity: 0.9;
}

.curso-stats {
    display: flex;
    gap: 2rem;
}

.stat-item {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
}

.tabs-navigation {
    display: flex;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
    overflow: hidden;
}

.tab-button {
    flex: 1;
    padding: 1rem 2rem;
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    border-bottom: 3px solid transparent;
}

.tab-button:hover {
    background-color: #f8f9fa;
}

.tab-button.active {
    background-color: var(--primary-color, #4CAF50);
    color: white;
    border-bottom-color: var(--primary-hover, #45a049);
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.section-header h2 {
    margin: 0;
    color: #333;
}

.ramos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.ramo-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.ramo-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.15);
}

.ramo-header {
    margin-bottom: 1rem;
}

.ramo-header h3 {
    margin: 0 0 0.5rem 0;
    color: #333;
    font-size: 1.25rem;
}

.ramo-codigo {
    background: #e9ecef;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.875rem;
    color: #6c757d;
}

.ramo-stats {
    margin-bottom: 1.5rem;
}

.ramo-stat {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    color: #6c757d;
    font-size: 0.875rem;
}

.ramo-stat.active {
    color: var(--primary-color, #4CAF50);
    font-weight: 500;
}

.ramo-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.ramo-admin-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
}

.btn-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
}

.btn-icon.edit {
    background: #f39c12;
    color: white;
}

.btn-icon.edit:hover {
    background: #e67e22;
    transform: translateY(-1px);
}

.btn-icon.delete {
    background: #e74c3c;
    color: white;
}

.btn-icon.delete:hover {
    background: #c0392b;
    transform: translateY(-1px);
}

.toast {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
}

.toast.show {
    opacity: 1;
    transform: translateX(0);
}

.toast-success {
    background: #27ae60;
}

.toast-error {
    background: #e74c3c;
}

.empty-state {
    text-align: center;
    padding: 3rem 2rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    color: #dee2e6;
}

.empty-state h3 {
    margin-bottom: 1rem;
    color: #495057;
}

.estudiantes-table {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}

.table {
    width: 100%;
    border-collapse: collapse;
    margin: 0;
}

.table th,
.table td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #dee2e6;
}

.table th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #495057;
}

.estudiante-codigo {
    font-family: 'Courier New', monospace;
    background: #e9ecef;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
}

.fecha-inscripcion {
    color: #6c757d;
    font-size: 0.875rem;
}

.badge.activo {
    background-color: #28a745;
    color: white;
}

.acciones-estudiante {
    display: flex;
    gap: 0.5rem;
}

.btn-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 6px;
    background: #f8f9fa;
    color: #6c757d;
    text-decoration: none;
    transition: all 0.2s ease;
}

.btn-icon:hover {
    background: var(--primary-color, #4CAF50);
    color: white;
}

.estadisticas-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
}

.stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    gap: 1rem;
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    background: var(--primary-color, #4CAF50);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
}

.stat-details h3 {
    margin: 0 0 0.25rem 0;
    font-size: 2rem;
    color: #333;
}

.stat-details p {
    margin: 0;
    color: #6c757d;
    font-size: 0.875rem;
}

.ramos-estadisticas {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.ramos-estadisticas h3 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: #333;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.25rem;
}

.progress-fill {
    height: 100%;
    background: var(--primary-color, #4CAF50);
    transition: width 0.3s ease;
}

.curso-actions {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.acciones-propietario {
    display: flex;
    gap: 1rem;
}

.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-primary {
    background-color: var(--primary-color, #4CAF50);
    color: white;
}

.btn-primary:hover {
    background-color: var(--primary-hover, #45a049);
    transform: translateY(-1px);
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background-color: #5a6268;
    transform: translateY(-1px);
}

.btn-outline {
    background-color: transparent;
    color: var(--primary-color, #4CAF50);
    border: 2px solid var(--primary-color, #4CAF50);
}

.btn-outline:hover {
    background-color: var(--primary-color, #4CAF50);
    color: white;
}

@@media (max-width: 768px) {
    .curso-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }

    .curso-titulo {
        flex-direction: column;
        text-align: center;
        gap: 0.5rem;
    }

    .curso-titulo h1 {
        font-size: 2rem;
    }

    .curso-stats {
        justify-content: center;
        gap: 1rem;
    }

    .tabs-navigation {
        flex-direction: column;
    }

    .tab-button {
        justify-content: flex-start;
        padding: 1rem;
    }

    .ramos-grid {
        grid-template-columns: 1fr;
    }

    .estadisticas-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .curso-actions {
        flex-direction: column;
        gap: 1rem;
    }

    .acciones-propietario {
        justify-content: center;
    }
}
</style>

<script>
// Funcionalidad de pestañas
document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetTab = this.getAttribute('data-tab');
            
            // Remover clase active de todos los botones y contenidos
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Agregar clase active al botón clickeado y su contenido
            this.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
        });
    });
});

// Función para eliminar ramo
function eliminarRamo(ramoId, ramoNombre) {
    if (confirm(`¿Estás seguro de que quieres eliminar el ramo "${ramoNombre}"?\n\nEsta acción no se puede deshacer.`)) {
        fetch(`/docente/ramos/${ramoId}/eliminar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'success');
                // Recargar la página después de 1.5 segundos
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showToast(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Error al eliminar el ramo', 'error');
        });
    }
}

// Función para mostrar notificaciones
function showToast(message, type) {
    // Crear el toast si no existe
    let toast = document.getElementById('toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'toast';
        toast.className = 'toast';
        document.body.appendChild(toast);
    }
    
    toast.textContent = message;
    toast.className = `toast toast-${type} show`;
    
    // Ocultar después de 4 segundos
    setTimeout(() => {
        toast.className = toast.className.replace('show', '');
    }, 4000);
}
</script>