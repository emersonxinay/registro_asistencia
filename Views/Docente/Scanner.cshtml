@model List<ClaseActivaViewModel>

<div class="scanner-container">
    <div class="scanner-header">
        <div class="header-content">
            <h1>üì± Esc√°ner QR Docente</h1>
            <p>Escanea los c√≥digos QR de los estudiantes para registrar asistencia</p>
        </div>
        <div class="header-actions">
            <button class="btn-secondary" onclick="toggleCamera()">
                <i data-lucide="camera"></i>
                <span id="cameraToggleText">Activar C√°mara</span>
            </button>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">üìö</div>
            <h3>No tienes clases activas</h3>
            <p>Necesitas tener al menos una clase activa para usar el esc√°ner de asistencia.</p>
            <div class="empty-actions">
                <a href="/workflow" class="btn-primary">Crear Nueva Clase</a>
            </div>
        </div>
    }
    else
    {
        <!-- Selecci√≥n de Clase -->
        <div class="class-selection">
            <h2>üìñ Selecciona la Clase</h2>
            <div class="classes-grid">
                @foreach (var clase in Model)
                {
                    <div class="class-option" data-class-id="@clase.Id" onclick="selectClass(@clase.Id, '@clase.Nombre')">
                        <div class="class-info">
                            <h4>@clase.Nombre</h4>
                            <p>@clase.RamoNombre - @clase.CursoNombre</p>
                            <small>Iniciada: @clase.HoraInicio.ToString("HH:mm") ‚Ä¢ @clase.MinutosTranscurridos min</small>
                        </div>
                        <div class="class-indicator">
                            @if (clase.MinutosTranscurridos <= 20)
                            {
                                <span class="status-badge on-time">A tiempo</span>
                            }
                            else
                            {
                                <span class="status-badge late">Tardanza</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Esc√°ner QR -->
        <div class="qr-scanner" id="qrScanner" style="display: none;">
            <div class="scanner-content">
                <div class="selected-class" id="selectedClassInfo">
                    <!-- Se llenar√° din√°micamente -->
                </div>

                <div class="scanner-area">
                    <div class="camera-container">
                        <video id="cameraFeed" autoplay playsinline></video>
                        <canvas id="qrCanvas" style="display: none;"></canvas>
                        <div class="scanner-overlay">
                            <div class="scanner-frame"></div>
                            <p class="scanner-instruction">Coloca el c√≥digo QR del estudiante dentro del marco</p>
                        </div>
                    </div>

                    <div class="scanner-controls">
                        <button class="btn-secondary" onclick="switchCamera()">
                            <i data-lucide="refresh-cw"></i>
                            Cambiar C√°mara
                        </button>
                        <button class="btn-outline" onclick="manualEntry()">
                            <i data-lucide="keyboard"></i>
                            Entrada Manual
                        </button>
                    </div>
                </div>

                <!-- Resultados de Escaneo -->
                <div class="scan-results" id="scanResults">
                    <h3>üìã Asistencias Registradas</h3>
                    <div class="results-list" id="resultsList">
                        <!-- Se llenar√° din√°micamente -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal de Entrada Manual -->
        <div class="modal" id="manualEntryModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚úèÔ∏è Registro Manual de Asistencia</h3>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="studentCode">C√≥digo del Estudiante:</label>
                        <input type="text" id="studentCode" placeholder="Ingresa el c√≥digo del estudiante">
                    </div>
                    <div class="form-group">
                        <label for="justification">Justificaci√≥n (opcional):</label>
                        <textarea id="justification" placeholder="Raz√≥n del registro manual..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn-secondary" onclick="closeModal()">Cancelar</button>
                    <button class="btn-primary" onclick="registerManual()">Registrar Asistencia</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
.scanner-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.scanner-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 30px;
    gap: 20px;
}

.header-content h1 {
    margin: 0 0 10px 0;
    color: #2c3e50;
    font-size: 2.2em;
}

.header-content p {
    margin: 0;
    color: #7f8c8d;
    font-size: 1.1em;
}

.empty-state {
    text-align: center;
    padding: 60px 20px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.empty-icon {
    font-size: 4em;
    margin-bottom: 20px;
    opacity: 0.6;
}

.empty-state h3 {
    color: #2c3e50;
    margin-bottom: 15px;
    font-size: 1.8em;
}

.empty-state p {
    color: #7f8c8d;
    margin-bottom: 30px;
    font-size: 1.1em;
}

.class-selection {
    margin-bottom: 30px;
}

.class-selection h2 {
    color: #2c3e50;
    margin-bottom: 20px;
}

.classes-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
}

.class-option {
    background: white;
    border: 2px solid #e1e8ed;
    border-radius: 12px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.class-option:hover {
    border-color: #3498db;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.2);
}

.class-option.selected {
    border-color: #27ae60;
    background: #f8fff9;
}

.class-info {
    flex: 1;
}

.class-info h4 {
    margin: 0 0 8px 0;
    color: #2c3e50;
    font-size: 1.3em;
}

.class-info p {
    margin: 0 0 8px 0;
    color: #7f8c8d;
    font-size: 1em;
}

.class-info small {
    color: #95a5a6;
    font-size: 0.9em;
}

.class-indicator {
    margin-left: 15px;
}

.status-badge {
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.8em;
    font-weight: 600;
    text-transform: uppercase;
}

.status-badge.on-time {
    background: #27ae60;
    color: white;
}

.status-badge.late {
    background: #f39c12;
    color: white;
}

.qr-scanner {
    background: white;
    border-radius: 15px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.selected-class {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 30px;
}

.scanner-area {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 30px;
    margin-bottom: 30px;
}

.camera-container {
    position: relative;
    background: #000;
    border-radius: 10px;
    overflow: hidden;
    aspect-ratio: 4/3;
}

#cameraFeed {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.scanner-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    pointer-events: none;
}

.scanner-frame {
    width: 200px;
    height: 200px;
    border: 3px solid #27ae60;
    border-radius: 10px;
    position: relative;
    animation: pulse 2s infinite;
}

.scanner-frame::before,
.scanner-frame::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    border: 3px solid #27ae60;
}

.scanner-frame::before {
    top: -3px;
    left: -3px;
    border-right: none;
    border-bottom: none;
}

.scanner-frame::after {
    bottom: -3px;
    right: -3px;
    border-left: none;
    border-top: none;
}

@@keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
}

.scanner-instruction {
    color: white;
    background: rgba(0,0,0,0.7);
    padding: 10px 20px;
    border-radius: 6px;
    margin-top: 20px;
    text-align: center;
    font-size: 0.9em;
}

.scanner-controls {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.scan-results {
    border-top: 1px solid #e9ecef;
    padding-top: 20px;
}

.scan-results h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
}

.results-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-height: 300px;
    overflow-y: auto;
}

.result-item {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.result-item.success {
    border-color: #27ae60;
    background: #f8fff9;
}

.result-item.warning {
    border-color: #f39c12;
    background: #fffcf8;
}

.result-item.error {
    border-color: #e74c3c;
    background: #fff8f8;
}

.result-info {
    flex: 1;
}

.result-info h5 {
    margin: 0 0 5px 0;
    color: #2c3e50;
}

.result-info p {
    margin: 0;
    color: #7f8c8d;
    font-size: 0.9em;
}

.result-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: 600;
    text-transform: uppercase;
}

.result-badge.presente {
    background: #27ae60;
    color: white;
}

.result-badge.tardanza {
    background: #f39c12;
    color: white;
}

.result-badge.manual {
    background: #3498db;
    color: white;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
}

.modal-content {
    background: white;
    margin: 50px auto;
    padding: 0;
    border-radius: 10px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #e9ecef;
}

.modal-header h3 {
    margin: 0;
    color: #2c3e50;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #7f8c8d;
}

.modal-body {
    padding: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #2c3e50;
    font-weight: 600;
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    font-size: 1em;
    transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus {
    outline: none;
    border-color: #3498db;
}

.form-group textarea {
    height: 80px;
    resize: vertical;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    padding: 20px;
    border-top: 1px solid #e9ecef;
}

/* Buttons */
.btn-primary, .btn-secondary, .btn-outline {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    font-size: 0.95em;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #5a6268;
    transform: translateY(-1px);
}

.btn-outline {
    background: transparent;
    color: #3498db;
    border: 2px solid #3498db;
}

.btn-outline:hover {
    background: #3498db;
    color: white;
}

/* Responsive */
@@media (max-width: 768px) {
    .scanner-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .classes-grid {
        grid-template-columns: 1fr;
    }
    
    .scanner-area {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .scanner-controls {
        flex-direction: row;
    }
    
    .class-option {
        flex-direction: column;
        text-align: center;
        gap: 15px;
    }
}

@@media (max-width: 480px) {
    .scanner-container {
        padding: 15px;
    }
    
    .qr-scanner {
        padding: 20px;
    }
    
    .modal-content {
        margin: 20px auto;
        width: 95%;
    }
}
</style>

<script>
let selectedClassId = null;
let stream = null;
let isScanning = false;

// Variables para el esc√°ner QR
let codeReader = null;

function selectClass(classId, className) {
    selectedClassId = classId;
    
    // Actualizar visualizaci√≥n
    document.querySelectorAll('.class-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    document.querySelector(`[data-class-id="${classId}"]`).classList.add('selected');
    
    // Mostrar informaci√≥n de clase seleccionada
    const selectedClassInfo = document.getElementById('selectedClassInfo');
    selectedClassInfo.innerHTML = `
        <h3>üìñ Clase Seleccionada: ${className}</h3>
        <p>Los estudiantes que escanees ser√°n registrados para esta clase.</p>
        <div class="class-actions">
            <button class="btn-primary" onclick="startScanning()">
                <i data-lucide="scan"></i>
                Iniciar Escaneo
            </button>
        </div>
    `;
    
    // Mostrar esc√°ner
    document.getElementById('qrScanner').style.display = 'block';
    
    // Recargar iconos
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

function startScanning() {
    if (!selectedClassId) {
        alert('Primero selecciona una clase');
        return;
    }
    
    isScanning = true;
    startCamera();
    loadExistingAttendance();
}

async function startCamera() {
    try {
        const constraints = {
            video: {
                facingMode: 'environment' // C√°mara trasera preferida
            }
        };
        
        stream = await navigator.mediaDevices.getUserMedia(constraints);
        const video = document.getElementById('cameraFeed');
        video.srcObject = stream;
        
        updateCameraToggle(true);
        
        // Iniciar detecci√≥n QR
        startQRDetection();
        
    } catch (error) {
        console.error('Error accediendo a la c√°mara:', error);
        alert('No se pudo acceder a la c√°mara. Verifica los permisos.');
    }
}

function stopCamera() {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
        updateCameraToggle(false);
    }
    isScanning = false;
}

function updateCameraToggle(isActive) {
    const toggleText = document.getElementById('cameraToggleText');
    if (isActive) {
        toggleText.textContent = 'Desactivar C√°mara';
    } else {
        toggleText.textContent = 'Activar C√°mara';
    }
}

function toggleCamera() {
    if (stream) {
        stopCamera();
    } else {
        startCamera();
    }
}

function startQRDetection() {
    const video = document.getElementById('cameraFeed');
    const canvas = document.getElementById('qrCanvas');
    const context = canvas.getContext('2d');
    
    function scanFrame() {
        if (!isScanning || !video.videoWidth) {
            requestAnimationFrame(scanFrame);
            return;
        }
        
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0);
        
        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        
        try {
            // Aqu√≠ usar√≠as una librer√≠a como jsQR o similar
            // const qrCode = jsQR(imageData.data, canvas.width, canvas.height);
            // if (qrCode) {
            //     processQRCode(qrCode.data);
            // }
            
            // Simulaci√≥n para pruebas - remover en producci√≥n
            // processQRCode('STUDENT_123');
            
        } catch (error) {
            console.error('Error detectando QR:', error);
        }
        
        if (isScanning) {
            requestAnimationFrame(scanFrame);
        }
    }
    
    video.addEventListener('loadeddata', () => {
        scanFrame();
    });
}

async function processQRCode(qrData) {
    if (!selectedClassId) return;
    
    try {
        const response = await fetch('/api/attendance/scan-student', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                claseId: selectedClassId,
                qrData: qrData,
                metodo: 'QrDocente'
            })
        });
        
        const result = await response.json();
        addScanResult(result);
        
        // Feedback visual/sonoro
        if (result.success) {
            showSuccess(`‚úÖ ${result.studentName} registrado correctamente`);
        } else {
            showError(`‚ùå ${result.message}`);
        }
        
    } catch (error) {
        console.error('Error procesando QR:', error);
        showError('Error al procesar el c√≥digo QR');
    }
}

function addScanResult(result) {
    const resultsList = document.getElementById('resultsList');
    const resultItem = document.createElement('div');
    resultItem.className = `result-item ${result.success ? 'success' : 'error'}`;
    
    const now = new Date();
    const timeStr = now.toLocaleTimeString();
    
    resultItem.innerHTML = `
        <div class="result-info">
            <h5>${result.studentName || 'Estudiante desconocido'}</h5>
            <p>${result.message} - ${timeStr}</p>
        </div>
        <div class="result-badge ${result.estado?.toLowerCase() || 'error'}">
            ${result.estado || 'Error'}
        </div>
    `;
    
    resultsList.insertBefore(resultItem, resultsList.firstChild);
}

function switchCamera() {
    // Implementar cambio de c√°mara (frontal/trasera)
    alert('Funci√≥n de cambio de c√°mara en desarrollo');
}

function manualEntry() {
    document.getElementById('manualEntryModal').style.display = 'block';
}

function closeModal() {
    document.getElementById('manualEntryModal').style.display = 'none';
    document.getElementById('studentCode').value = '';
    document.getElementById('justification').value = '';
}

async function registerManual() {
    const studentCode = document.getElementById('studentCode').value.trim();
    const justification = document.getElementById('justification').value.trim();
    
    if (!studentCode) {
        alert('Ingresa el c√≥digo del estudiante');
        return;
    }
    
    if (!selectedClassId) {
        alert('Selecciona una clase primero');
        return;
    }
    
    try {
        const response = await fetch('/api/attendance/manual-register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                claseId: selectedClassId,
                studentCode: studentCode,
                justification: justification,
                metodo: 'Manual'
            })
        });
        
        const result = await response.json();
        addScanResult(result);
        
        if (result.success) {
            showSuccess(`‚úÖ ${result.studentName} registrado manualmente`);
            closeModal();
        } else {
            showError(`‚ùå ${result.message}`);
        }
        
    } catch (error) {
        console.error('Error en registro manual:', error);
        showError('Error en el registro manual');
    }
}

async function loadExistingAttendance() {
    if (!selectedClassId) return;
    
    try {
        const response = await fetch(`/api/attendance/class/${selectedClassId}`);
        const attendances = await response.json();
        
        attendances.forEach(attendance => {
            const result = {
                success: true,
                studentName: attendance.studentName,
                estado: attendance.estado,
                message: `Registrado previamente a las ${new Date(attendance.marcadaUtc).toLocaleTimeString()}`
            };
            addScanResult(result);
        });
        
    } catch (error) {
        console.error('Error cargando asistencias:', error);
    }
}

function showSuccess(message) {
    // Implementar notificaci√≥n de √©xito
    console.log('‚úÖ', message);
}

function showError(message) {
    // Implementar notificaci√≥n de error
    console.log('‚ùå', message);
}

// Limpiar recursos al salir
window.addEventListener('beforeunload', () => {
    stopCamera();
});

// Modal click outside to close
document.getElementById('manualEntryModal').addEventListener('click', (e) => {
    if (e.target.id === 'manualEntryModal') {
        closeModal();
    }
});

// Inicializar iconos cuando carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
});
</script>