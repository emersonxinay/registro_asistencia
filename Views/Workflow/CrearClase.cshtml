@model CrearClaseViewModel

<div class="workflow-container">
    <!-- Header del Workflow -->
    <div class="workflow-header">
        <div class="workflow-breadcrumb">
            <span class="step completed">1. Seleccionar Curso</span>
            <span class="step completed">2. Seleccionar Ramo</span>
            <span class="step active">3. Configurar Clase</span>
            <span class="step">4. Clase Creada</span>
        </div>
        <h1>‚öôÔ∏è Paso 3: Configurar Clase</h1>
        <p>Define los detalles de la nueva clase para <strong>@Model.RamoNombre</strong></p>
    </div>

    <!-- Resumen de Selecci√≥n -->
    <div class="selection-summary">
        <div class="summary-card">
            <h3>üìã Resumen de Selecci√≥n</h3>
            <div class="selection-path">
                <div class="path-item">
                    <div class="path-icon">üìö</div>
                    <div class="path-details">
                        <span class="path-label">Curso:</span>
                        <span class="path-value">@Model.CursoNombre</span>
                    </div>
                </div>
                <div class="path-arrow">‚Üí</div>
                <div class="path-item">
                    <div class="path-icon">üìñ</div>
                    <div class="path-details">
                        <span class="path-label">Ramo:</span>
                        <span class="path-value">@Model.RamoNombre</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Formulario de Configuraci√≥n -->
    <div class="class-configuration">
        <form id="crearClaseForm" action="/workflow/procesar-clase" method="post" onsubmit="return submitForm(event)">
            @Html.AntiForgeryToken()
            <input type="hidden" id="cursoId" name="CursoId" value="@Model.CursoId">
            <input type="hidden" id="ramoId" name="RamoId" value="@Model.RamoId">
            
            <div class="config-sections">
                <!-- Informaci√≥n B√°sica -->
                <div class="config-section">
                    <div class="section-header">
                        <h3>üìù Informaci√≥n B√°sica</h3>
                        <p>Define el nombre y descripci√≥n de la clase</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-group full-width">
                            <label for="nombre">
                                <i data-lucide="tag"></i>
                                Nombre de la Clase *
                            </label>
                            <input 
                                type="text" 
                                id="nombre" 
                                name="NombreClase" 
                                placeholder="Ej: Introducci√≥n a los conceptos b√°sicos"
                                required
                                maxlength="100">
                            <small>Nombre descriptivo para identificar esta clase espec√≠fica</small>
                        </div>
                        
                        <div class="form-group full-width">
                            <label for="descripcion">
                                <i data-lucide="file-text"></i>
                                Descripci√≥n (Opcional)
                            </label>
                            <textarea 
                                id="descripcion" 
                                name="Descripcion" 
                                placeholder="Describe los temas o actividades que se tratar√°n en esta clase..."
                                rows="3"
                                maxlength="500"></textarea>
                            <small>Informaci√≥n adicional sobre el contenido de la clase</small>
                        </div>
                    </div>
                </div>

                <!-- Programaci√≥n de Tiempo -->
                <div class="config-section">
                    <div class="section-header">
                        <h3>‚è∞ Programaci√≥n de Tiempo</h3>
                        <p>Configura cu√°ndo se realizar√° la clase y su duraci√≥n</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="fechaInicio">
                                <i data-lucide="calendar"></i>
                                Fecha de la Clase *
                            </label>
                            <input 
                                type="date" 
                                id="fechaInicio" 
                                name="FechaClase" 
                                required
                                min="@DateTime.Now.ToString("yyyy-MM-dd")">
                            <small>Selecciona el d√≠a en que se realizar√° la clase</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="horaInicio">
                                <i data-lucide="clock"></i>
                                Hora de Inicio *
                            </label>
                            <input 
                                type="time" 
                                id="horaInicio" 
                                name="HoraInicio" 
                                required>
                            <small>Hora en que comenzar√° la clase</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="duracionMinutos">
                                <i data-lucide="timer"></i>
                                Duraci√≥n (minutos) *
                            </label>
                            <select id="duracionMinutos" name="DuracionMinutos" required>
                                <option value="">Selecciona duraci√≥n...</option>
                                <option value="45">45 minutos</option>
                                <option value="60">1 hora</option>
                                <option value="90" selected>1 hora 30 min</option>
                                <option value="120">2 horas</option>
                                <option value="150">2 horas 30 min</option>
                                <option value="180">3 horas</option>
                            </select>
                            <small>Tiempo total que durar√° la clase</small>
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <i data-lucide="calendar-check"></i>
                                Hora de Finalizaci√≥n
                            </label>
                            <input 
                                type="time" 
                                id="horaFin" 
                                name="horaFin" 
                                readonly>
                            <small>Se calcula autom√°ticamente</small>
                        </div>
                    </div>
                </div>

                <!-- Configuraci√≥n de Asistencia -->
                <div class="config-section">
                    <div class="section-header">
                        <h3>‚úÖ Configuraci√≥n de Asistencia</h3>
                        <p>Define las reglas para el registro de asistencia</p>
                    </div>
                    
                    <div class="attendance-config">
                        <div class="config-grid">
                            <div class="config-card">
                                <div class="config-icon success">‚è±Ô∏è</div>
                                <div class="config-content">
                                    <h4>Tiempo de Tolerancia</h4>
                                    <div class="tolerance-setting">
                                        <label for="toleranciaMinutos">Minutos de tolerancia:</label>
                                        <select id="toleranciaMinutos" name="ConfiguracionAsistencia.LimitePresenteMinutos">
                                            <option value="15">15 minutos</option>
                                            <option value="20" selected>20 minutos</option>
                                            <option value="25">25 minutos</option>
                                            <option value="30">30 minutos</option>
                                        </select>
                                    </div>
                                    <small>Los estudiantes que lleguen dentro de este tiempo ser√°n marcados como "Presente"</small>
                                </div>
                            </div>
                            
                            <div class="config-card">
                                <div class="config-icon warning">‚ö†Ô∏è</div>
                                <div class="config-content">
                                    <h4>Despu√©s de la Tolerancia</h4>
                                    <p>Los estudiantes que lleguen despu√©s del tiempo de tolerancia ser√°n marcados como "Tardanza"</p>
                                    <small>Si nunca escanean durante la clase, quedar√°n como "Ausente"</small>
                                </div>
                            </div>
                        </div>
                        
                        <div class="attendance-info">
                            <div class="info-item">
                                <span class="status-present">‚óè</span>
                                <span><strong>Presente:</strong> Llegada dentro de los primeros <span id="toleranciaDisplay">20</span> minutos</span>
                            </div>
                            <div class="info-item">
                                <span class="status-late">‚óè</span>
                                <span><strong>Tardanza:</strong> Llegada despu√©s de <span id="toleranciaDisplay2">20</span> minutos, pero durante la clase</span>
                            </div>
                            <div class="info-item">
                                <span class="status-absent">‚óè</span>
                                <span><strong>Ausente:</strong> No registr√≥ asistencia durante toda la clase</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Vista Previa -->
            <div class="class-preview">
                <h3>üëÄ Vista Previa de la Clase</h3>
                <div class="preview-card">
                    <div class="preview-header">
                        <div class="preview-icon">üìö</div>
                        <div class="preview-details">
                            <h4 id="previewNombre">Nombre de la clase...</h4>
                            <p id="previewInfo">@Model.RamoNombre - @Model.CursoNombre</p>
                            <p id="previewFecha">Fecha y hora por definir</p>
                        </div>
                    </div>
                    <div class="preview-description" id="previewDescripcion" style="display: none;">
                        <p></p>
                    </div>
                    <div class="preview-stats">
                        <div class="stat-preview">
                            <span class="stat-icon">‚è∞</span>
                            <span id="previewDuracion">Duraci√≥n por definir</span>
                        </div>
                        <div class="stat-preview">
                            <span class="stat-icon">‚úÖ</span>
                            <span id="previewTolerancia">Tolerancia por definir</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Botones de Acci√≥n -->
            <div class="form-actions">
                <a href="/workflow/curso/@Model.CursoId/ramos" class="btn-secondary">
                    ‚Üê Cambiar Ramo
                </a>
                
                <div class="primary-actions">
                    <button type="button" class="btn-outline" onclick="guardarBorrador()">
                        <i data-lucide="save"></i>
                        Guardar Borrador
                    </button>
                    <button type="submit" class="btn-primary">
                        <i data-lucide="play"></i>
                        Crear y Activar Clase
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<style>
.workflow-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.workflow-header {
    text-align: center;
    margin-bottom: 40px;
}

.workflow-breadcrumb {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.workflow-breadcrumb .step {
    background: #f8f9fa;
    color: #6c757d;
    padding: 10px 20px;
    border-radius: 25px;
    font-size: 0.9em;
    font-weight: 500;
}

.workflow-breadcrumb .step.completed {
    background: #27ae60;
    color: white;
    box-shadow: 0 2px 8px rgba(39, 174, 96, 0.3);
}

.workflow-breadcrumb .step.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
}

.workflow-header h1 {
    color: #2c3e50;
    margin-bottom: 10px;
    font-size: 2.5em;
}

.workflow-header p {
    color: #7f8c8d;
    font-size: 1.2em;
    margin: 0;
}

.selection-summary {
    margin-bottom: 40px;
}

.summary-card {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    border-left: 5px solid #3498db;
}

.summary-card h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
}

.selection-path {
    display: flex;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap;
}

.path-item {
    display: flex;
    align-items: center;
    gap: 12px;
    background: #f8f9fa;
    padding: 15px 20px;
    border-radius: 10px;
    flex: 1;
    min-width: 250px;
}

.path-icon {
    font-size: 1.8em;
    color: #3498db;
}

.path-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.path-label {
    font-size: 0.9em;
    color: #7f8c8d;
    font-weight: 500;
}

.path-value {
    font-size: 1em;
    color: #2c3e50;
    font-weight: 600;
}

.path-arrow {
    font-size: 1.5em;
    color: #3498db;
    font-weight: bold;
}

.class-configuration {
    background: white;
    border-radius: 15px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    margin-bottom: 30px;
}

.config-sections {
    display: flex;
    flex-direction: column;
    gap: 40px;
    margin-bottom: 40px;
}

.config-section {
    border: 1px solid #e9ecef;
    border-radius: 12px;
    overflow: hidden;
}

.section-header {
    background: #f8f9fa;
    padding: 20px 25px;
    border-bottom: 1px solid #e9ecef;
}

.section-header h3 {
    margin: 0 0 8px 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
}

.section-header p {
    margin: 0;
    color: #7f8c8d;
    font-size: 0.95em;
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    padding: 25px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.form-group.full-width {
    grid-column: 1 / -1;
}

.form-group label {
    font-weight: 600;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.95em;
}

.form-group input,
.form-group select,
.form-group textarea {
    padding: 12px 15px;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 1em;
    transition: all 0.3s ease;
    background: white;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.form-group small {
    color: #7f8c8d;
    font-size: 0.85em;
}

.attendance-config {
    padding: 25px;
}

.config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.config-card {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 20px;
    border: 2px solid #e9ecef;
}

.config-icon {
    font-size: 2em;
    margin-bottom: 10px;
    display: block;
}

.config-icon.success {
    color: #27ae60;
}

.config-icon.warning {
    color: #f39c12;
}

.config-content h4 {
    margin: 0 0 15px 0;
    color: #2c3e50;
}

.tolerance-setting {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.tolerance-setting label {
    font-weight: 600;
    color: #2c3e50;
}

.attendance-info {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
}

.info-item {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 8px;
}

.status-present { color: #27ae60; }
.status-late { color: #f39c12; }
.status-absent { color: #e74c3c; }

.class-preview {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 30px;
}

.class-preview h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
}

.preview-card {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.preview-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
}

.preview-icon {
    font-size: 2.5em;
    color: #3498db;
}

.preview-details h4 {
    margin: 0 0 8px 0;
    color: #2c3e50;
    font-size: 1.4em;
}

.preview-details p {
    margin: 0;
    color: #7f8c8d;
    font-size: 0.95em;
}

.preview-description {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 15px;
    margin-bottom: 15px;
}

.preview-stats {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.stat-preview {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #7f8c8d;
    font-size: 0.9em;
}

.stat-icon {
    color: #3498db;
}

.form-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 30px;
    border-top: 1px solid #e9ecef;
}

.primary-actions {
    display: flex;
    gap: 15px;
}

.btn-primary, .btn-secondary, .btn-outline {
    padding: 12px 24px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    border: none;
    cursor: pointer;
    font-size: 0.95em;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #5a6268;
    transform: translateY(-1px);
}

.btn-outline {
    background: transparent;
    color: #3498db;
    border: 2px solid #3498db;
}

.btn-outline:hover {
    background: #3498db;
    color: white;
}

/* Responsive */
@@media (max-width: 768px) {
    .workflow-breadcrumb {
        gap: 10px;
    }
    
    .workflow-breadcrumb .step {
        font-size: 0.8em;
        padding: 8px 15px;
    }
    
    .selection-path {
        flex-direction: column;
    }
    
    .path-arrow {
        transform: rotate(90deg);
    }
    
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .config-grid {
        grid-template-columns: 1fr;
    }
    
    .form-actions {
        flex-direction: column;
        gap: 15px;
    }
    
    .primary-actions {
        justify-content: center;
        flex-wrap: wrap;
    }
}

@@media (max-width: 480px) {
    .workflow-container {
        padding: 15px;
    }
    
    .class-configuration {
        padding: 20px;
    }
    
    .form-grid {
        padding: 20px;
    }
    
    .preview-header {
        flex-direction: column;
        text-align: center;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Establecer fecha m√≠nima como hoy
    const fechaInput = document.getElementById('fechaInicio');
    const today = new Date().toISOString().split('T')[0];
    fechaInput.value = today;
    
    // Establecer hora actual + 1 hora como hora por defecto
    const horaInput = document.getElementById('horaInicio');
    const now = new Date();
    now.setHours(now.getHours() + 1);
    horaInput.value = now.toTimeString().slice(0, 5);
    
    // Inicializar vista previa
    updatePreview();
    updateEndTime();
    updateToleranceDisplay();
    
    // Event listeners
    document.getElementById('nombre').addEventListener('input', updatePreview);
    document.getElementById('descripcion').addEventListener('input', updatePreview);
    document.getElementById('fechaInicio').addEventListener('change', updatePreview);
    document.getElementById('horaInicio').addEventListener('change', function() {
        updatePreview();
        updateEndTime();
    });
    document.getElementById('duracionMinutos').addEventListener('change', function() {
        updatePreview();
        updateEndTime();
    });
    document.getElementById('toleranciaMinutos').addEventListener('change', updateToleranceDisplay);
    
    // Inicializar iconos
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
});

function updatePreview() {
    const nombre = document.getElementById('nombre').value || 'Nombre de la clase...';
    const descripcion = document.getElementById('descripcion').value;
    const fecha = document.getElementById('fechaInicio').value;
    const hora = document.getElementById('horaInicio').value;
    const duracion = document.getElementById('duracionMinutos').value;
    
    document.getElementById('previewNombre').textContent = nombre;
    
    // Actualizar fecha y hora
    if (fecha && hora) {
        const fechaObj = new Date(fecha + 'T' + hora);
        const fechaStr = fechaObj.toLocaleDateString('es-ES', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
        const horaStr = fechaObj.toLocaleTimeString('es-ES', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        document.getElementById('previewFecha').textContent = `${fechaStr} a las ${horaStr}`;
    }
    
    // Actualizar descripci√≥n
    const previewDesc = document.getElementById('previewDescripcion');
    if (descripcion.trim()) {
        previewDesc.style.display = 'block';
        previewDesc.querySelector('p').textContent = descripcion;
    } else {
        previewDesc.style.display = 'none';
    }
    
    // Actualizar duraci√≥n
    if (duracion) {
        const horas = Math.floor(duracion / 60);
        const minutos = duracion % 60;
        let duracionStr = '';
        if (horas > 0) {
            duracionStr += `${horas}h `;
        }
        if (minutos > 0) {
            duracionStr += `${minutos}min`;
        }
        document.getElementById('previewDuracion').textContent = duracionStr;
    } else {
        document.getElementById('previewDuracion').textContent = 'Duraci√≥n por definir';
    }
}

function updateEndTime() {
    const horaInicio = document.getElementById('horaInicio').value;
    const duracion = document.getElementById('duracionMinutos').value;
    
    if (horaInicio && duracion) {
        const [horas, minutos] = horaInicio.split(':').map(Number);
        const inicioMinutos = horas * 60 + minutos;
        const finMinutos = inicioMinutos + parseInt(duracion);
        
        const horaFin = Math.floor(finMinutos / 60) % 24;
        const minutoFin = finMinutos % 60;
        
        const horaFinStr = `${horaFin.toString().padStart(2, '0')}:${minutoFin.toString().padStart(2, '0')}`;
        document.getElementById('horaFin').value = horaFinStr;
    }
}

function updateToleranceDisplay() {
    const tolerancia = document.getElementById('toleranciaMinutos').value;
    document.getElementById('toleranciaDisplay').textContent = tolerancia;
    document.getElementById('toleranciaDisplay2').textContent = tolerancia;
    document.getElementById('previewTolerancia').textContent = `${tolerancia} min de tolerancia`;
}

async function submitForm(event) {
    event.preventDefault();
    
    // Mostrar loading
    const submitBtn = event.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<div class="spinner-small"></div> Creando clase...';
    submitBtn.disabled = true;
    
    try {
        // Simplemente enviar el formulario de forma normal
        event.target.submit();
    } catch (error) {
        console.error('Error:', error);
        alert(`Error al crear la clase: ${error.message}`);
        
        // Restaurar bot√≥n
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }
    
    return false;
}

async function guardarBorrador() {
    // Implementar guardado de borrador
    alert('Funci√≥n de borrador en desarrollo');
}

// Agregar CSS para spinner peque√±o
const style = document.createElement('style');
style.textContent = `
    .spinner-small {
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        display: inline-block;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);
</script>