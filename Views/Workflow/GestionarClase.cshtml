@model registroAsistencia.Controllers.GestionarClaseViewModel
@{
    ViewData["Title"] = "Gestionar Clase";
}

@section Styles {
    <style>
        .gestionar-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--space-6);
        }

        .class-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
            color: white;
            padding: var(--space-8);
            border-radius: var(--radius-xl);
            margin-bottom: var(--space-8);
            position: relative;
            overflow: hidden;
        }

        .class-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(50%, -50%);
        }

        .class-info {
            position: relative;
            z-index: 1;
        }

        .class-title {
            font-size: 2rem;
            font-weight: 700;
            margin: 0 0 var(--space-2) 0;
        }

        .class-meta {
            display: flex;
            gap: var(--space-6);
            margin-top: var(--space-4);
            flex-wrap: wrap;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: var(--space-2);
            font-size: 0.875rem;
            opacity: 0.9;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--space-6);
            margin-bottom: var(--space-8);
        }

        .stat-card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: var(--space-6);
            text-align: center;
            box-shadow: var(--shadow-sm);
            transition: var(--transition);
        }

        .stat-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            background: var(--primary-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto var(--space-4) auto;
            color: white;
            font-size: 1.5rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--gray-800);
            margin: 0 0 var(--space-1) 0;
        }

        .stat-label {
            color: var(--gray-600);
            font-size: 0.875rem;
            margin: 0;
        }

        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: var(--space-6);
            margin-bottom: var(--space-8);
        }

        .action-panel {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            overflow: hidden;
            box-shadow: var(--shadow-sm);
        }

        .panel-header {
            background: var(--gray-50);
            padding: var(--space-5);
            border-bottom: 1px solid var(--gray-200);
        }

        .panel-title {
            margin: 0 0 var(--space-1) 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
        }

        .panel-subtitle {
            margin: 0;
            font-size: 0.875rem;
            color: var(--gray-600);
        }

        .panel-content {
            padding: var(--space-5);
        }

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: var(--space-3);
        }

        .btn-action {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-2);
            padding: var(--space-3) var(--space-4);
            border: 1px solid var(--gray-300);
            border-radius: var(--radius-lg);
            text-decoration: none;
            font-size: 0.875rem;
            font-weight: 500;
            transition: var(--transition);
            color: var(--gray-700);
            background: white;
        }

        .btn-action:hover {
            color: var(--primary-color);
            border-color: var(--primary-color);
            background: var(--gray-50);
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
            border-color: var(--success-color);
        }

        .btn-success:hover {
            background: var(--success-color);
            opacity: 0.9;
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
            border-color: var(--danger-color);
        }

        .btn-danger:hover {
            background: var(--danger-color);
            opacity: 0.9;
            color: white;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: var(--space-1);
            padding: var(--space-1) var(--space-3);
            border-radius: var(--radius-lg);
            font-size: 0.75rem;
            font-weight: 600;
        }

        .status-badge.active {
            background: var(--success-color);
            color: white;
        }

        .status-badge.closed {
            background: var(--gray-400);
            color: white;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--gray-200);
            border-radius: var(--radius-lg);
            overflow: hidden;
            margin: var(--space-3) 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--success-color), var(--primary-color));
            transition: width 0.5s ease;
        }

        .recent-activity {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: var(--space-6);
            box-shadow: var(--shadow-sm);
        }

        .activity-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-4);
        }

        .activity-title {
            margin: 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
        }

        .refresh-btn {
            display: inline-flex;
            align-items: center;
            gap: var(--space-1);
            padding: var(--space-2) var(--space-3);
            background: none;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius-md);
            color: var(--gray-600);
            font-size: 0.75rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .refresh-btn:hover {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        /* UX Improvements */
        .btn-action:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            pointer-events: none;
        }

        .animate-spin {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .action-buttons {
            gap: var(--space-3);
        }

        .btn-action {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .btn-action:active {
            transform: translateY(0);
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
            border-color: var(--danger-color);
        }

        .btn-danger:hover {
            background: #dc2626;
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
            border-color: var(--success-color);
        }

        .btn-success:hover {
            background: #059669;
            color: white;
        }

        .stat-card {
            animation: fadeInUp 0.6s ease-out;
        }

        .stat-card:nth-child(1) { animation-delay: 0.1s; }
        .stat-card:nth-child(2) { animation-delay: 0.2s; }
        .stat-card:nth-child(3) { animation-delay: 0.3s; }
        .stat-card:nth-child(4) { animation-delay: 0.4s; }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .action-panel {
            animation: slideInFromLeft 0.8s ease-out;
        }

        .action-panel:nth-of-type(odd) {
            animation: slideInFromLeft 0.8s ease-out;
        }

        .action-panel:nth-of-type(even) {
            animation: slideInFromRight 0.8s ease-out;
        }

        @@keyframes slideInFromLeft {
            from {
                opacity: 0;
                transform: translateX(-50px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes slideInFromRight {
            from {
                opacity: 0;
                transform: translateX(50px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .class-header {
            animation: slideInFromTop 0.8s ease-out;
        }

        @@keyframes slideInFromTop {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@media (max-width: 768px) {
            .gestionar-container {
                padding: var(--space-4);
            }

            .class-meta {
                flex-direction: column;
                gap: var(--space-3);
            }

            .stats-grid,
            .actions-grid {
                grid-template-columns: 1fr;
            }

            .class-title {
                font-size: 1.5rem;
            }
        }
    </style>
}

<div class="gestionar-container">
    <!-- Class Header -->
    <div class="class-header">
        <div class="class-info">
            <span class="status-badge @(Model.Clase.Activa ? "active" : "closed")">
                <i data-lucide="@(Model.Clase.Activa ? "play-circle" : "pause-circle")"></i>
                @(Model.Clase.Activa ? "Clase Activa" : "Clase Finalizada")
            </span>
            <h1 class="class-title">@Model.Clase.NombreCompleto</h1>

            <div class="class-meta">
                <div class="meta-item">
                    <i data-lucide="calendar"></i>
                    <span>@Model.Clase.InicioUtc.ToString("dd/MM/yyyy")</span>
                </div>
                <div class="meta-item">
                    <i data-lucide="clock"></i>
                    <span>@Model.Clase.InicioUtc.ToString("HH:mm")</span>
                </div>
                @if (Model.EsClaseLibre)
                {
                    <div class="meta-item">
                        <i data-lucide="book-x"></i>
                        <span>📚 Clase Libre</span>
                    </div>
                }
                else if (Model.Clase.Ramo?.Curso != null)
                {
                    <div class="meta-item">
                        <i data-lucide="book-open"></i>
                        <span>@Model.Clase.Ramo.Curso.Nombre</span>
                    </div>
                }
                @if (Model.Clase.Activa)
                {
                    <div class="meta-item">
                        <i data-lucide="activity"></i>
                        <span>
                            @{
                                var duration = DateTime.UtcNow - Model.Clase.InicioUtc;
                                <span>@((int)duration.TotalMinutes) min activa</span>
                            }
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (Model.EsClaseLibre)
    {
        <!-- Información para Clases Libres -->
        <div style="background: linear-gradient(135deg, #e0f2fe, #b3e5fc); border: 1px solid #0288d1; border-radius: var(--radius-xl); padding: var(--space-4); margin-bottom: var(--space-6); text-align: center;">
            <div style="display: flex; align-items: center; justify-content: center; gap: var(--space-2); margin-bottom: var(--space-2);">
                <i data-lucide="info" style="color: #0288d1; width: 20px; height: 20px;"></i>
                <strong style="color: #0277bd;">Clase Libre - Registro Abierto</strong>
            </div>
            <p style="color: #0277bd; margin: 0; font-size: 0.9rem;">
                Los estudiantes pueden registrarse escaneando el código QR. No hay lista previa de estudiantes matriculados.
            </p>
        </div>
    }

    <!-- Statistics -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon">
                <i data-lucide="users-check"></i>
            </div>
            <div class="stat-value">@Model.TotalAsistencias</div>
            <p class="stat-label">Asistencias Registradas</p>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i data-lucide="users"></i>
            </div>
            <div class="stat-value">@Model.TotalEstudiantes</div>
            <p class="stat-label">@(Model.EsClaseLibre ? "Estudiantes Registrados" : "Total Estudiantes")</p>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i data-lucide="trending-up"></i>
            </div>
            <div class="stat-value">@Model.PorcentajeAsistencia.ToString("F1")%</div>
            <p class="stat-label">Porcentaje Asistencia</p>
            <div class="progress-bar">
                <div class="progress-fill" style="width: @Model.PorcentajeAsistencia%"></div>
            </div>
        </div>
    </div>

    <!-- Action Panels -->
    <div class="actions-grid">
        <!-- QR y Scanner -->
        <div class="action-panel">
            <div class="panel-header">
                <h3 class="panel-title">Código QR y Scanner</h3>
                <p class="panel-subtitle">Herramientas para registro de asistencia</p>
            </div>
            <div class="panel-content">
                <div class="action-buttons">
                    <a href="/clases/@Model.Clase.Id/qr" class="btn-action btn-success" target="_blank">
                        <i data-lucide="qr-code"></i>
                        Ver Código QR
                    </a>
                    <a href="/docente/scanner/@Model.Clase.Id" class="btn-action btn-primary">
                        <i data-lucide="scan"></i>
                        Abrir Scanner
                    </a>
                    <a href="/docente/scanner" class="btn-action">
                        <i data-lucide="user-plus"></i>
                        Registro Manual
                    </a>
                </div>
            </div>
        </div>

        <!-- Gestión de Clase -->
        <div class="action-panel">
            <div class="panel-header">
                <h3 class="panel-title">Gestión de Clase</h3>
                <p class="panel-subtitle">Administrar y configurar la clase</p>
            </div>
            <div class="panel-content">
                <div class="action-buttons">
                    <a href="/workflow/clase/@Model.Clase.Id/asistencias" class="btn-action">
                        <i data-lucide="list"></i>
                        Ver Asistencias
                    </a>
                    @if (Model.Clase.Activa)
                    {
                        <form method="post" action="/workflow/clase/@Model.Clase.Id/finalizar" style="margin: 0;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn-action btn-danger" onclick="return confirm('¿Estás seguro de que quieres finalizar esta clase?')">
                                <i data-lucide="square"></i>
                                Finalizar Clase
                            </button>
                        </form>
                    }
                    else
                    {
                        <a href="/api/clases/@Model.Clase.Id/reabrir" class="btn-action btn-success" onclick="return confirm('¿Reabrir esta clase?')">
                            <i data-lucide="play-circle"></i>
                            Reabrir Clase
                        </a>
                    }
                    <button class="btn-action" onclick="duplicarClase(@Model.Clase.Id)">
                        <i data-lucide="copy"></i>
                        Duplicar Clase
                    </button>
                </div>
            </div>
        </div>

        <!-- Reportes y Exportación -->
        <div class="action-panel">
            <div class="panel-header">
                <h3 class="panel-title">Reportes y Exportación</h3>
                <p class="panel-subtitle">Generar reportes de asistencia</p>
            </div>
            <div class="panel-content">
                <div class="action-buttons">
                    <a href="/api/clases/@Model.Clase.Id/asistencias.csv" class="btn-action">
                        <i data-lucide="download"></i>
                        Exportar CSV
                    </a>
                    <a href="/api/clases/@Model.Clase.Id/asistencias/export-completo" class="btn-action">
                        <i data-lucide="file-spreadsheet"></i>
                        Reporte Completo
                    </a>
                    <button class="btn-action" onclick="generarReportePDF()">
                        <i data-lucide="file-text"></i>
                        Generar PDF
                    </button>
                    <button class="btn-action" onclick="window.print()">
                        <i data-lucide="printer"></i>
                        Imprimir Resumen
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="recent-activity">
        <div class="activity-header">
            <h3 class="activity-title">Actividad Reciente</h3>
            <button class="refresh-btn" onclick="location.reload()">
                <i data-lucide="refresh-cw"></i>
                Actualizar
            </button>
        </div>
        <div id="activity-content">
            <p style="color: var(--gray-600); text-align: center; padding: var(--space-4);">
                Cargando actividad reciente...
            </p>
        </div>
    </div>

    <!-- Navigation -->
    <div style="margin-top: var(--space-8); text-align: center;">
        <a href="/workflow/misclases" class="btn-action" style="display: inline-flex;">
            <i data-lucide="arrow-left"></i>
            Volver a Mis Clases
        </a>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize Lucide icons when page loads
        document.addEventListener('DOMContentLoaded', function() {
            lucide.createIcons();

            // Load recent activity
            loadRecentActivity();
        });

        async function loadRecentActivity() {
            try {
                const response = await fetch(`/api/clases/@Model.Clase.Id/asistencias`);
                const asistencias = await response.json();

                const activityContent = document.getElementById('activity-content');

                if (asistencias && asistencias.length > 0) {
                    const recentItems = asistencias.slice(0, 5).map(a => `
                        <div style="display: flex; align-items: center; gap: var(--space-3); padding: var(--space-2) 0; border-bottom: 1px solid var(--gray-200);">
                            <div style="width: 32px; height: 32px; background: var(--success-color); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 0.75rem;">
                                <i data-lucide="check"></i>
                            </div>
                            <div style="flex: 1;">
                                <p style="margin: 0; font-weight: 500; color: var(--gray-800);">${a.alumnoNombre || 'Estudiante'}</p>
                                <small style="color: var(--gray-500);">Registrado: ${new Date(a.marcadaUtc).toLocaleString()}</small>
                            </div>
                        </div>
                    `).join('');

                    activityContent.innerHTML = recentItems;
                } else {
                    activityContent.innerHTML = `
                        <p style="color: var(--gray-600); text-align: center; padding: var(--space-4);">
                            No hay asistencias registradas aún
                        </p>
                    `;
                }

                // Re-initialize icons for new content
                lucide.createIcons();
            } catch (error) {
                console.error('Error loading activity:', error);
                document.getElementById('activity-content').innerHTML = `
                    <p style="color: var(--danger-color); text-align: center; padding: var(--space-4);">
                        Error al cargar la actividad reciente
                    </p>
                `;
            }
        }

        // Duplicar clase function con UX mejorada
        async function duplicarClase(claseId) {
            // Mostrar modal de confirmación personalizado
            if (!await showConfirmModal('Duplicar Clase', '¿Estás seguro de que quieres duplicar esta clase?', 'Duplicar', 'Cancelar')) return;

            const button = event.target.closest('button');
            const originalText = button.innerHTML;

            try {
                // Mostrar loading
                button.disabled = true;
                button.innerHTML = '<i data-lucide="loader" class="animate-spin"></i> Duplicando...';

                const response = await fetch(`/api/clases/${claseId}/duplicar`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Error al duplicar clase');
                }

                const claseNueva = await response.json();

                // Mostrar éxito y redirigir
                await showSuccessModal('¡Éxito!', `Clase duplicada exitosamente. ID: ${claseNueva.id}`);
                window.location.href = `/workflow/clase/${claseNueva.id}/gestionar`;

            } catch (error) {
                console.error('Error duplicando clase:', error);
                await showErrorModal('Error', 'Error al duplicar la clase: ' + error.message);
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
                lucide.createIcons();
            }
        }

        // Generar reporte PDF
        async function generarReportePDF() {
            const button = event.target.closest('button');
            const originalText = button.innerHTML;

            try {
                button.disabled = true;
                button.innerHTML = '<i data-lucide="loader" class="animate-spin"></i> Generando PDF...';

                // Simular generación de PDF (aquí podrías integrar con una librería como jsPDF)
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Por ahora, abrir la vista de asistencias para imprimir
                window.open(`/workflow/clase/@Model.Clase.Id/asistencias?print=true`, '_blank');

                await showSuccessModal('¡Éxito!', 'PDF generado exitosamente');

            } catch (error) {
                await showErrorModal('Error', 'Error al generar PDF: ' + error.message);
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
                lucide.createIcons();
            }
        }

        // Modales personalizados para mejor UX
        function showConfirmModal(title, message, confirmText, cancelText) {
            return new Promise((resolve) => {
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.5); display: flex; align-items: center;
                    justify-content: center; z-index: 1000;
                `;

                modal.innerHTML = `
                    <div style="background: white; padding: 2rem; border-radius: 12px; max-width: 400px; text-align: center; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
                        <h3 style="margin: 0 0 1rem 0; color: var(--gray-800);">${title}</h3>
                        <p style="margin: 0 0 2rem 0; color: var(--gray-600);">${message}</p>
                        <div style="display: flex; gap: 1rem; justify-content: center;">
                            <button id="cancelBtn" style="padding: 0.75rem 1.5rem; border: 1px solid var(--gray-300); background: white; border-radius: 8px; cursor: pointer;">${cancelText}</button>
                            <button id="confirmBtn" style="padding: 0.75rem 1.5rem; border: none; background: var(--primary-color); color: white; border-radius: 8px; cursor: pointer;">${confirmText}</button>
                        </div>
                    </div>
                `;

                document.body.appendChild(modal);

                modal.querySelector('#confirmBtn').onclick = () => {
                    document.body.removeChild(modal);
                    resolve(true);
                };

                modal.querySelector('#cancelBtn').onclick = () => {
                    document.body.removeChild(modal);
                    resolve(false);
                };

                modal.onclick = (e) => {
                    if (e.target === modal) {
                        document.body.removeChild(modal);
                        resolve(false);
                    }
                };
            });
        }

        function showSuccessModal(title, message) {
            return showMessageModal(title, message, 'var(--success-color)');
        }

        function showErrorModal(title, message) {
            return showMessageModal(title, message, 'var(--danger-color)');
        }

        function showMessageModal(title, message, color) {
            return new Promise((resolve) => {
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.5); display: flex; align-items: center;
                    justify-content: center; z-index: 1000;
                `;

                modal.innerHTML = `
                    <div style="background: white; padding: 2rem; border-radius: 12px; max-width: 400px; text-align: center; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
                        <div style="width: 60px; height: 60px; background: ${color}; border-radius: 50%; margin: 0 auto 1rem; display: flex; align-items: center; justify-content: center;">
                            <i data-lucide="${color === 'var(--success-color)' ? 'check' : 'x'}" style="color: white; font-size: 24px;"></i>
                        </div>
                        <h3 style="margin: 0 0 1rem 0; color: var(--gray-800);">${title}</h3>
                        <p style="margin: 0 0 2rem 0; color: var(--gray-600);">${message}</p>
                        <button id="okBtn" style="padding: 0.75rem 2rem; border: none; background: ${color}; color: white; border-radius: 8px; cursor: pointer;">Entendido</button>
                    </div>
                `;

                document.body.appendChild(modal);
                lucide.createIcons();

                const closeModal = () => {
                    document.body.removeChild(modal);
                    resolve();
                };

                modal.querySelector('#okBtn').onclick = closeModal;
                modal.onclick = (e) => {
                    if (e.target === modal) closeModal();
                };

                // Auto close after 3 seconds
                setTimeout(closeModal, 3000);
            });
        }
    </script>
}