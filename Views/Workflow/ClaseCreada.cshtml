@model ClaseCreadaViewModel

<div class="workflow-container">
    <!-- Header del Workflow -->
    <div class="workflow-header">
        <div class="workflow-breadcrumb">
            <span class="step completed">1. Seleccionar Curso</span>
            <span class="step completed">2. Seleccionar Ramo</span>
            <span class="step completed">3. Configurar Clase</span>
            <span class="step completed active">4. Clase Creada</span>
        </div>
        <h1>üéâ ¬°Clase Creada Exitosamente!</h1>
        <p>Tu clase <strong>@Model.NombreClase</strong> ha sido creada y est√° lista para recibir asistencias</p>
    </div>

    <!-- Tarjeta de √âxito -->
    <div class="success-card">
        <div class="success-animation">
            <div class="check-circle">
                <div class="check-mark">‚úì</div>
            </div>
        </div>
        
        <div class="success-content">
            <h2>Clase Configurada Correctamente</h2>
            <p>Los estudiantes podr√°n registrar su asistencia escaneando el c√≥digo QR o mediante el esc√°ner del docente</p>
        </div>
    </div>

    <!-- Informaci√≥n de la Clase -->
    <div class="class-details">
        <div class="details-header">
            <h3>üìö Detalles de la Clase</h3>
        </div>
        
        <div class="details-content">
            <div class="detail-row">
                <div class="detail-label">
                    <i data-lucide="tag"></i>
                    Nombre:
                </div>
                <div class="detail-value">@Model.NombreClase</div>
            </div>
            
            <div class="detail-row">
                <div class="detail-label">
                    <i data-lucide="book"></i>
                    Curso - Ramo:
                </div>
                <div class="detail-value">@Model.CursoNombre - @Model.RamoNombre</div>
            </div>
            
            <div class="detail-row">
                <div class="detail-label">
                    <i data-lucide="calendar"></i>
                    Fecha y Hora:
                </div>
                <div class="detail-value">
                    @Model.FechaHoraInicio.ToString("dddd, dd 'de' MMMM 'de' yyyy 'a las' HH:mm", new System.Globalization.CultureInfo("es-ES"))
                </div>
            </div>
            
            <div class="detail-row">
                <div class="detail-label">
                    <i data-lucide="clock"></i>
                    Duraci√≥n:
                </div>
                <div class="detail-value">
                    90 minutos
                    (duraci√≥n estimada)
                </div>
            </div>
            
            @* Descripci√≥n temporal deshabilitada hasta que se agregue al ViewModel *@
        </div>
    </div>

    <!-- C√≥digos QR -->
    <div class="qr-section">
        <div class="qr-header">
            <h3>üì± C√≥digos QR de Asistencia</h3>
            <p>Los estudiantes pueden usar cualquiera de estos c√≥digos para registrar su asistencia</p>
        </div>
        
        <div class="qr-container">
            <!-- QR Principal de la Clase -->
            <div class="qr-card main-qr">
                <div class="qr-card-header">
                    <h4>üè´ QR Principal de la Clase</h4>
                    <p>C√≥digo QR √∫nico para esta clase espec√≠fica</p>
                </div>
                
                <div class="qr-display">
                    <div class="qr-image">
                        <img src="data:image/png;base64,@Model.QrCodeBase64" alt="QR de la Clase" />
                    </div>
                    <div class="qr-info">
                        <p><strong>ID de la Clase:</strong> @Model.ClaseId</p>
                        <p><strong>V√°lido durante toda la clase</strong></p>
                    </div>
                </div>
                
                <div class="qr-actions">
                    <button class="btn-outline" onclick="imprimirQR('clase')">
                        <i data-lucide="printer"></i>
                        Imprimir QR
                    </button>
                    <button class="btn-outline" onclick="descargarQR('clase', '@Model.NombreClase')">
                        <i data-lucide="download"></i>
                        Descargar
                    </button>
                    <button class="btn-primary" onclick="compartirQR()">
                        <i data-lucide="share-2"></i>
                        Compartir
                    </button>
                </div>
            </div>

            <!-- Instrucciones para Estudiantes -->
            <div class="student-instructions">
                <div class="instructions-header">
                    <h4>üìù Instrucciones para Estudiantes</h4>
                </div>
                
                <div class="instructions-content">
                    <div class="instruction-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h5>Escanear el C√≥digo QR</h5>
                            <p>Usa la c√°mara de tu tel√©fono o cualquier app de QR para escanear el c√≥digo</p>
                        </div>
                    </div>
                    
                    <div class="instruction-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h5>Completar Registro</h5>
                            <p>Ingresa tu c√≥digo de estudiante para confirmar tu asistencia</p>
                        </div>
                    </div>
                    
                    <div class="instruction-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h5>Confirmaci√≥n</h5>
                            <p>Recibir√°s una confirmaci√≥n de que tu asistencia fue registrada exitosamente</p>
                        </div>
                    </div>
                </div>
                
                <div class="timing-info">
                    <div class="timing-card success">
                        <span class="timing-icon">‚è∞</span>
                        <div class="timing-content">
                            <strong>Llegada Puntual</strong>
                            <p>Primeros 20 minutos = Presente</p>
                        </div>
                    </div>
                    
                    <div class="timing-card warning">
                        <span class="timing-icon">‚ö†Ô∏è</span>
                        <div class="timing-content">
                            <strong>Llegada Tard√≠a</strong>
                            <p>Despu√©s de 20 min = Tardanza</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Panel de Control -->
    <div class="control-panel">
        <div class="panel-header">
            <h3>‚öôÔ∏è Panel de Control de la Clase</h3>
            <div class="class-status">
                <span class="status-indicator active"></span>
                <span class="status-text">Clase Activa</span>
            </div>
        </div>
        
        <div class="control-actions">
            <div class="action-group">
                <h4>üìä Monitoreo</h4>
                <div class="action-buttons">
                    <a href="/docente/scanner/@Model.ClaseId" class="btn-primary">
                        <i data-lucide="scan"></i>
                        Abrir Esc√°ner
                    </a>
                    <a href="/docente/clases/@Model.ClaseId/asistencias" class="btn-secondary">
                        <i data-lucide="users"></i>
                        Ver Asistencias
                    </a>
                </div>
            </div>
            
            <div class="action-group">
                <h4>üîß Gesti√≥n</h4>
                <div class="action-buttons">
                    <a href="/docente/clases/@Model.ClaseId/editar" class="btn-outline">
                        <i data-lucide="edit"></i>
                        Editar Clase
                    </a>
                    <button class="btn-outline" onclick="cerrarClase(@Model.ClaseId)">
                        <i data-lucide="square"></i>
                        Finalizar Clase
                    </button>
                </div>
            </div>
            
            <div class="action-group">
                <h4>üìà Reportes</h4>
                <div class="action-buttons">
                    <button class="btn-outline" onclick="generarReporte(@Model.ClaseId)">
                        <i data-lucide="file-spreadsheet"></i>
                        Exportar Lista
                    </button>
                    <button class="btn-outline" onclick="enviarNotificaciones(@Model.ClaseId)">
                        <i data-lucide="mail"></i>
                        Notificar Estudiantes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Acciones Principales -->
    <div class="main-actions">
        <a href="/workflow" class="btn-secondary">
            <i data-lucide="plus"></i>
            Crear Otra Clase
        </a>
        
        <a href="/docente/dashboard" class="btn-primary">
            <i data-lucide="layout-dashboard"></i>
            Ir al Dashboard
        </a>
    </div>
</div>

<style>
.workflow-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.workflow-header {
    text-align: center;
    margin-bottom: 40px;
}

.workflow-breadcrumb {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.workflow-breadcrumb .step {
    background: #f8f9fa;
    color: #6c757d;
    padding: 10px 20px;
    border-radius: 25px;
    font-size: 0.9em;
    font-weight: 500;
}

.workflow-breadcrumb .step.completed {
    background: #27ae60;
    color: white;
    box-shadow: 0 2px 8px rgba(39, 174, 96, 0.3);
}

.workflow-breadcrumb .step.completed.active {
    background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
    box-shadow: 0 4px 15px rgba(39, 174, 96, 0.4);
    transform: scale(1.05);
}

.workflow-header h1 {
    color: #27ae60;
    margin-bottom: 10px;
    font-size: 2.5em;
}

.workflow-header p {
    color: #7f8c8d;
    font-size: 1.2em;
    margin: 0;
}

.success-card {
    background: linear-gradient(135deg, #f8fff9 0%, #eafaf1 100%);
    border: 1px solid #27ae60;
    border-radius: 20px;
    padding: 40px;
    text-align: center;
    margin-bottom: 40px;
    position: relative;
    overflow: hidden;
}

.success-animation {
    margin-bottom: 30px;
}

.check-circle {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: #27ae60;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    box-shadow: 0 8px 25px rgba(39, 174, 96, 0.3);
    animation: successPulse 2s ease-in-out infinite;
}

.check-mark {
    color: white;
    font-size: 3em;
    font-weight: bold;
    animation: checkAppear 0.6s ease-out;
}

@@keyframes successPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

@@keyframes checkAppear {
    0% { opacity: 0; transform: scale(0.5); }
    100% { opacity: 1; transform: scale(1); }
}

.success-content h2 {
    margin: 0 0 15px 0;
    color: #27ae60;
    font-size: 2em;
}

.success-content p {
    margin: 0;
    color: #2c7a2c;
    font-size: 1.1em;
}

.class-details {
    background: white;
    border-radius: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    overflow: hidden;
}

.details-header {
    background: #f8f9fa;
    padding: 20px 25px;
    border-bottom: 1px solid #e9ecef;
}

.details-header h3 {
    margin: 0;
    color: #2c3e50;
}

.details-content {
    padding: 25px;
}

.detail-row {
    display: flex;
    margin-bottom: 20px;
    align-items: flex-start;
    gap: 20px;
}

.detail-row.full-width {
    flex-direction: column;
    gap: 10px;
}

.detail-label {
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
    color: #2c3e50;
    min-width: 150px;
    flex-shrink: 0;
}

.detail-value {
    color: #5a6c7d;
    font-size: 1.05em;
    line-height: 1.5;
}

.qr-section {
    background: white;
    border-radius: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    overflow: hidden;
}

.qr-header {
    background: #f8f9fa;
    padding: 20px 25px;
    border-bottom: 1px solid #e9ecef;
    text-align: center;
}

.qr-header h3 {
    margin: 0 0 10px 0;
    color: #2c3e50;
}

.qr-header p {
    margin: 0;
    color: #7f8c8d;
}

.qr-container {
    padding: 30px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
}

.qr-card {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 25px;
    text-align: center;
}

.main-qr {
    border: 2px solid #3498db;
}

.qr-card-header h4 {
    margin: 0 0 10px 0;
    color: #2c3e50;
}

.qr-card-header p {
    margin: 0 0 25px 0;
    color: #7f8c8d;
    font-size: 0.95em;
}

.qr-display {
    margin-bottom: 25px;
}

.qr-image {
    margin-bottom: 20px;
}

.qr-image img {
    width: 200px;
    height: 200px;
    border-radius: 10px;
    border: 2px solid #e9ecef;
}

.qr-info {
    background: white;
    border-radius: 8px;
    padding: 15px;
}

.qr-info p {
    margin: 0 0 8px 0;
    color: #5a6c7d;
    font-size: 0.9em;
}

.qr-info p:last-child {
    margin: 0;
}

.qr-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
    flex-wrap: wrap;
}

.student-instructions {
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 25px;
}

.instructions-header h4 {
    margin: 0 0 20px 0;
    color: #2c3e50;
    text-align: center;
}

.instructions-content {
    margin-bottom: 25px;
}

.instruction-step {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    margin-bottom: 20px;
}

.step-number {
    background: #3498db;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    flex-shrink: 0;
}

.step-content h5 {
    margin: 0 0 5px 0;
    color: #2c3e50;
}

.step-content p {
    margin: 0;
    color: #7f8c8d;
    font-size: 0.9em;
}

.timing-info {
    display: flex;
    gap: 15px;
}

.timing-card {
    flex: 1;
    background: white;
    border-radius: 8px;
    padding: 15px;
    display: flex;
    align-items: center;
    gap: 12px;
}

.timing-card.success {
    border-left: 4px solid #27ae60;
}

.timing-card.warning {
    border-left: 4px solid #f39c12;
}

.timing-icon {
    font-size: 1.5em;
}

.timing-card.success .timing-icon {
    color: #27ae60;
}

.timing-card.warning .timing-icon {
    color: #f39c12;
}

.timing-content strong {
    display: block;
    color: #2c3e50;
    margin-bottom: 2px;
}

.timing-content p {
    margin: 0;
    color: #7f8c8d;
    font-size: 0.85em;
}

.control-panel {
    background: white;
    border-radius: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    overflow: hidden;
}

.panel-header {
    background: #f8f9fa;
    padding: 20px 25px;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.panel-header h3 {
    margin: 0;
    color: #2c3e50;
}

.class-status {
    display: flex;
    align-items: center;
    gap: 8px;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #27ae60;
    animation: pulse 2s infinite;
}

@@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

.status-text {
    color: #27ae60;
    font-weight: 600;
    font-size: 0.9em;
}

.control-actions {
    padding: 30px 25px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
}

.action-group h4 {
    margin: 0 0 15px 0;
    color: #2c3e50;
    font-size: 1.1em;
}

.action-buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.main-actions {
    display: flex;
    justify-content: center;
    gap: 20px;
    padding-top: 20px;
}

.btn-primary, .btn-secondary, .btn-outline {
    padding: 12px 20px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    border: none;
    cursor: pointer;
    font-size: 0.9em;
    text-align: center;
    justify-content: center;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #5a6268;
    transform: translateY(-1px);
}

.btn-outline {
    background: transparent;
    color: #3498db;
    border: 2px solid #3498db;
}

.btn-outline:hover {
    background: #3498db;
    color: white;
}

/* Responsive */
@@media (max-width: 768px) {
    .workflow-breadcrumb {
        gap: 10px;
    }
    
    .workflow-breadcrumb .step {
        font-size: 0.8em;
        padding: 8px 15px;
    }
    
    .qr-container {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .detail-row {
        flex-direction: column;
        gap: 10px;
    }
    
    .detail-label {
        min-width: auto;
    }
    
    .control-actions {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .main-actions {
        flex-direction: column;
    }
    
    .timing-info {
        flex-direction: column;
    }
    
    .qr-actions {
        flex-direction: column;
    }
}

@@media (max-width: 480px) {
    .workflow-container {
        padding: 15px;
    }
    
    .success-card {
        padding: 30px 20px;
    }
    
    .check-circle {
        width: 80px;
        height: 80px;
    }
    
    .check-mark {
        font-size: 2.5em;
    }
    
    .qr-image img {
        width: 150px;
        height: 150px;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar iconos
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
    
    // Auto-refresh de stats cada 30 segundos
    setInterval(updateClassStats, 30000);
});

function imprimirQR(tipo) {
    const qrImage = document.querySelector('.qr-image img');
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
        <head>
            <title>QR de Asistencia - @Model.NombreClase</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    padding: 20px;
                }
                img {
                    width: 300px;
                    height: 300px;
                }
                h1 {
                    margin-bottom: 10px;
                }
                .info {
                    margin-top: 20px;
                    font-size: 14px;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <h1>@Model.NombreClase</h1>
            <p>@Model.CursoNombre - @Model.RamoNombre</p>
            <img src="${qrImage.src}" alt="QR de Asistencia" />
            <div class="info">
                <p>Fecha: @Model.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</p>
                <p>Escanea este c√≥digo para registrar tu asistencia</p>
            </div>
        </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

function descargarQR(tipo, nombre) {
    const qrImage = document.querySelector('.qr-image img');
    const link = document.createElement('a');
    link.download = `QR_${nombre.replace(/[^a-zA-Z0-9]/g, '_')}.png`;
    link.href = qrImage.src;
    link.click();
}

function compartirQR() {
    const qrImage = document.querySelector('.qr-image img');
    const className = '@Model.NombreClase';
    
    if (navigator.share) {
        // Web Share API (m√≥viles)
        fetch(qrImage.src)
            .then(res => res.blob())
            .then(blob => {
                const file = new File([blob], `QR_${className}.png`, { type: 'image/png' });
                return navigator.share({
                    title: `QR de Asistencia - ${className}`,
                    text: 'Escanea este c√≥digo QR para registrar tu asistencia',
                    files: [file]
                });
            })
            .catch(err => {
                // Fallback a copiar enlace
                copyQRLink();
            });
    } else {
        // Fallback para escritorio
        copyQRLink();
    }
}

function copyQRLink() {
    const classUrl = `${window.location.origin}/asistencia/@Model.ClaseId`;
    navigator.clipboard.writeText(classUrl).then(() => {
        showNotification('Enlace copiado al portapapeles', 'success');
    });
}

async function cerrarClase(claseId) {
    if (!confirm('¬øEst√°s seguro de que deseas finalizar esta clase? Esta acci√≥n marcar√° como ausentes a todos los estudiantes que no registraron asistencia.')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/clases/${claseId}/cerrar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showNotification('Clase finalizada correctamente', 'success');
            // Actualizar estado en la p√°gina
            updateClassStatus('finalizada');
        } else {
            throw new Error(result.message || 'Error al finalizar la clase');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification(`Error al finalizar la clase: ${error.message}`, 'error');
    }
}

async function generarReporte(claseId) {
    try {
        const response = await fetch(`/api/clases/${claseId}/reporte-excel`, {
            method: 'GET'
        });
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `Asistencias_@(Model.NombreClase.Replace(" ", "_"))_${new Date().toISOString().split('T')[0]}.xlsx`;
            link.click();
            window.URL.revokeObjectURL(url);
            
            showNotification('Reporte descargado correctamente', 'success');
        } else {
            throw new Error('Error al generar el reporte');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification(`Error al generar reporte: ${error.message}`, 'error');
    }
}

async function enviarNotificaciones(claseId) {
    if (!confirm('¬øDeseas enviar notificaciones a todos los estudiantes sobre esta clase?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/clases/${claseId}/notificar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showNotification(`Notificaciones enviadas a ${result.notificationsCount} estudiantes`, 'success');
        } else {
            throw new Error(result.message || 'Error al enviar notificaciones');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification(`Error al enviar notificaciones: ${error.message}`, 'error');
    }
}

async function updateClassStats() {
    try {
        const response = await fetch(`/api/clases/@Model.ClaseId/stats`);
        const stats = await response.json();
        
        // Actualizar estad√≠sticas en tiempo real si es necesario
        // Implementar seg√∫n necesidades
        
    } catch (error) {
        console.error('Error actualizando estad√≠sticas:', error);
    }
}

function updateClassStatus(status) {
    const statusIndicator = document.querySelector('.status-indicator');
    const statusText = document.querySelector('.status-text');
    
    if (status === 'finalizada') {
        statusIndicator.style.background = '#95a5a6';
        statusIndicator.style.animation = 'none';
        statusText.textContent = 'Clase Finalizada';
        statusText.style.color = '#95a5a6';
    }
}

function showNotification(message, type) {
    // Crear notificaci√≥n toast
    const toast = document.createElement('div');
    toast.className = `notification ${type}`;
    toast.textContent = message;
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    
    if (type === 'success') {
        toast.style.background = '#27ae60';
    } else if (type === 'error') {
        toast.style.background = '#e74c3c';
    } else {
        toast.style.background = '#3498db';
    }
    
    document.body.appendChild(toast);
    
    // Animar entrada
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
    }, 100);
    
    // Remover despu√©s de 3 segundos
    setTimeout(() => {
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, 3000);
}
</script>