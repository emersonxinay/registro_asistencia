<!DOCTYPE html>
<html lang="es" class="theme-system">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Registro Asistencia por QR</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <!-- Styles -->
    <link href="~/css/styles.css" rel="stylesheet" />
    <link href="~/css/modern-ui.css" rel="stylesheet" />
    <link href="~/css/responsive-nav.css" rel="stylesheet" />
    
    <!-- Meta tags -->
    <meta name="theme-color" content="#0ea5e9">
    <meta name="description" content="Sistema de asistencia inteligente con QR avanzado">
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="quantum-body">
    <!-- Background effects -->
    <div class="quantum-bg">
        <div class="quantum-orbs">
            <div class="orb orb-1"></div>
            <div class="orb orb-2"></div>
            <div class="orb orb-3"></div>
        </div>
        <div class="quantum-mesh"></div>
    </div>
    
    <!-- Navbar Refactorizado - Verdaderamente Responsive -->
    <header class="main-header" id="mainHeader">
        <div class="header-container">
            @if (User.Identity?.IsAuthenticated == true)
            {
                <!-- Brand -->
                <div class="header-brand">
                    <a href="/" class="brand-link">
                        <i data-lucide="graduation-cap" class="brand-icon"></i>
                        <span class="brand-text">Registro QR</span>
                    </a>
                </div>

                <!-- Desktop Navigation -->
                <nav class="desktop-nav">
                    <div class="nav-group nav-primary">
                        <a href="/dashboard" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i data-lucide="home"></i>
                            <span>Dashboard</span>
                        </a>

                        <!-- Dropdown Clases -->
                        <div class="nav-dropdown">
                            <div class="nav-dropdown-toggle">
                                <i data-lucide="graduation-cap"></i>
                                <span>Clases</span>
                            </div>
                            <div class="nav-dropdown-menu">
                                <a href="/workflow/cursos" class="nav-dropdown-item">
                                    <i data-lucide="plus-circle"></i>
                                    <span>Nueva Clase</span>
                                </a>
                                <a href="/workflow/mis-clases" class="nav-dropdown-item">
                                    <i data-lucide="calendar-days"></i>
                                    <span>Mis Clases</span>
                                </a>
                                <a href="/docente/scanner" class="nav-dropdown-item">
                                    <i data-lucide="qr-code"></i>
                                    <span>Escáner QR</span>
                                </a>
                                <div class="nav-dropdown-divider"></div>
                                <a href="/workflow/qr-students" class="nav-dropdown-item">
                                    <i data-lucide="smartphone"></i>
                                    <span>QR Estudiantes</span>
                                </a>
                            </div>
                        </div>

                        <!-- Dropdown Gestión -->
                        <div class="nav-dropdown">
                            <div class="nav-dropdown-toggle">
                                <i data-lucide="folder"></i>
                                <span>Gestión</span>
                            </div>
                            <div class="nav-dropdown-menu">
                                <a href="/docente/cursos" class="nav-dropdown-item">
                                    <i data-lucide="book-open"></i>
                                    <span>Mis Cursos</span>
                                </a>
                                <a href="/alumnos" class="nav-dropdown-item">
                                    <i data-lucide="users"></i>
                                    <span>Lista de Alumnos</span>
                                </a>
                                <a href="/asistencias" class="nav-dropdown-item">
                                    <i data-lucide="users-check"></i>
                                    <span>Asistencias</span>
                                </a>
                                <div class="nav-dropdown-divider"></div>
                                <a href="/ramos" class="nav-dropdown-item">
                                    <i data-lucide="library"></i>
                                    <span>Ramos</span>
                                </a>
                                <a href="/cursos" class="nav-dropdown-item">
                                    <i data-lucide="school"></i>
                                    <span>Cursos</span>
                                </a>
                            </div>
                        </div>
                    </div>

                    <div class="nav-group nav-secondary">
                        @if (User.IsInRole("Administrador"))
                        {
                            <div class="nav-dropdown">
                                <div class="nav-dropdown-toggle admin">
                                    <i data-lucide="shield-check"></i>
                                    <span>Admin</span>
                                </div>
                                <div class="nav-dropdown-menu">
                                    <a href="/dashboard" class="nav-dropdown-item">
                                        <i data-lucide="layout-dashboard"></i>
                                        <span>Panel Admin</span>
                                    </a>
                                    <a href="/usuarios" class="nav-dropdown-item">
                                        <i data-lucide="user-cog"></i>
                                        <span>Gestión Usuarios</span>
                                    </a>
                                    <div class="nav-dropdown-divider"></div>
                                    <a href="/swagger" target="_blank" class="nav-dropdown-item">
                                        <i data-lucide="code"></i>
                                        <span>API Docs</span>
                                    </a>
                                </div>
                            </div>
                        }

                        <a href="/ayuda" class="nav-item">
                            <i data-lucide="help-circle"></i>
                            <span>Ayuda</span>
                        </a>
                    </div>
                </nav>

                <!-- User Info & Actions -->
                <div class="header-actions">
                    @{
                        var userInitials = "";
                        if (!string.IsNullOrEmpty(User.Identity.Name))
                        {
                            var names = User.Identity.Name.Split(' ');
                            userInitials = names.Length >= 2 ?
                                $"{names[0][0]}{names[1][0]}" :
                                names[0].Substring(0, Math.Min(2, names[0].Length));
                        }
                    }

                    <!-- Desktop User Info Simple -->
                    <div class="desktop-user-info">
                        <div class="user-avatar">
                            <span>@userInitials.ToUpper()</span>
                        </div>
                        <div class="user-details">
                            <span class="user-role @(User.IsInRole("Administrador") ? "admin" : "docente")">
                                @(User.IsInRole("Administrador") ? "ADMIN" : "DOCENTE")
                            </span>
                            <span class="user-name">@User.Identity.Name</span>
                        </div>
                    </div>

                    <!-- Desktop Logout Button -->
                    <form method="post" action="/logout" id="desktopLogoutForm" class="desktop-logout">
                        @Html.AntiForgeryToken()
                        <button type="button" class="desktop-logout-btn" onclick="confirmLogout('desktop')" title="Cerrar Sesión">
                            <i data-lucide="log-out"></i>
                            <span class="logout-text">Cerrar Sesión</span>
                        </button>
                    </form>

                    <!-- Mobile Menu Button -->
                    <button class="mobile-menu-btn" id="mobileMenuBtn" aria-label="Abrir menú">
                        <span class="burger-line"></span>
                        <span class="burger-line"></span>
                        <span class="burger-line"></span>
                    </button>
                </div>

                <!-- Mobile Navigation -->
                <nav class="mobile-nav" id="mobileNav">
                    <div class="mobile-nav-content">
                        <!-- User Profile -->
                        <div class="mobile-user-profile">
                            <div class="user-avatar">
                                <span>@userInitials.ToUpper()</span>
                            </div>
                            <div class="user-details">
                                <h3>@User.Identity.Name</h3>
                                <p>@(User.IsInRole("Administrador") ? "Administrador" : "Docente")</p>
                            </div>
                        </div>

                        <!-- Mobile Menu Items -->
                        <div class="mobile-menu-section">
                            <h4>Principal</h4>
                            <a href="/dashboard" class="mobile-nav-item">
                                <i data-lucide="home"></i>
                                <span>Dashboard</span>
                            </a>
                            <a href="/workflow/cursos" class="mobile-nav-item featured">
                                <i data-lucide="plus-circle"></i>
                                <span>Nueva Clase</span>
                            </a>
                            <a href="/docente/scanner" class="mobile-nav-item scanner">
                                <i data-lucide="qr-code"></i>
                                <span>Escáner QR</span>
                            </a>
                        </div>

                        <div class="mobile-menu-section">
                            <h4>Gestión</h4>
                            <a href="/workflow/mis-clases" class="mobile-nav-item">
                                <i data-lucide="calendar-days"></i>
                                <span>Mis Clases</span>
                            </a>
                            <a href="/docente/cursos" class="mobile-nav-item">
                                <i data-lucide="book-open"></i>
                                <span>Mis Cursos</span>
                            </a>
                            <a href="/asistencias" class="mobile-nav-item">
                                <i data-lucide="users-check"></i>
                                <span>Asistencias</span>
                            </a>
                            <a href="/workflow/qr-students" class="mobile-nav-item">
                                <i data-lucide="smartphone"></i>
                                <span>QR Estudiantes</span>
                            </a>
                        </div>

                        @if (User.IsInRole("Administrador"))
                        {
                            <div class="mobile-menu-section">
                                <h4>Administración</h4>
                                <a href="/dashboard" class="mobile-nav-item admin">
                                    <i data-lucide="shield-check"></i>
                                    <span>Panel Admin</span>
                                </a>
                            </div>
                        }

                        <div class="mobile-menu-section">
                            <h4>Mi Cuenta</h4>
                            <a href="/perfil" class="mobile-nav-item">
                                <i data-lucide="settings"></i>
                                <span>Mi Perfil</span>
                            </a>
                            <a href="/ayuda" class="mobile-nav-item">
                                <i data-lucide="help-circle"></i>
                                <span>Ayuda</span>
                            </a>
                            <form method="post" action="/logout" id="mobileLogoutForm">
                                @Html.AntiForgeryToken()
                                <button type="button" class="mobile-nav-item logout" onclick="confirmLogout('mobile')">
                                    <i data-lucide="log-out"></i>
                                    <span>Cerrar Sesión</span>
                                </button>
                            </form>
                        </div>
                    </div>
                </nav>

                <!-- Mobile Overlay -->
                <div class="mobile-overlay" id="mobileOverlay"></div>
            }
            else
            {
                <!-- Guest Header -->
                <div class="header-brand">
                    <a href="/" class="brand-link">
                        <i data-lucide="graduation-cap" class="brand-icon"></i>
                        <span class="brand-text">Registro QR</span>
                    </a>
                </div>

                <div class="header-actions">
                    <a href="/login" class="btn btn-outline">
                        <i data-lucide="log-in"></i>
                        <span>Ingresar</span>
                    </a>
                    <a href="/register" class="btn btn-primary">
                        <i data-lucide="user-plus"></i>
                        <span class="hide-mobile">Registrarse</span>
                    </a>
                </div>
            }
        </div>
    </header>

    <!-- Main Content -->
    <main class="modern-main">
        @RenderBody()
    </main>

    <!-- Footer Refactorizado -->
    <footer class="main-footer">
        <div class="footer-container">
            <div class="footer-content">
                <!-- Footer Brand -->
                <div class="footer-brand">
                    <div class="footer-logo">
                        <i data-lucide="graduation-cap"></i>
                        <span>Registro QR</span>
                    </div>
                    <p class="footer-description">Sistema de Asistencia Inteligente</p>
                </div>

                <!-- Footer Navigation -->
                <div class="footer-nav">
                    <div class="footer-section">
                        <h5>Sistema</h5>
                        <a href="/ayuda" class="footer-link">
                            <i data-lucide="help-circle"></i>
                            <span>Ayuda</span>
                        </a>
                        <a href="/swagger" target="_blank" class="footer-link">
                            <i data-lucide="code"></i>
                            <span>API Docs</span>
                        </a>
                    </div>

                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <div class="footer-section">
                            <h5>Accesos Rápidos</h5>
                            <a href="/dashboard" class="footer-link">
                                <i data-lucide="home"></i>
                                <span>Dashboard</span>
                            </a>
                            <a href="/docente/scanner" class="footer-link">
                                <i data-lucide="qr-code"></i>
                                <span>Escáner QR</span>
                            </a>
                        </div>
                    }
                </div>

                <!-- Footer Bottom -->
                <div class="footer-bottom">
                    <p>&copy; 2025 Sistema de Registro QR. Todos los derechos reservados.</p>
                    <div class="footer-meta">
                        <span class="version">v2.0</span>
                        <span class="build">Build @DateTime.Now.ToString("yyyyMMdd")</span>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="globalLoader">
        <div class="loading-content">
            <div class="quantum-spinner">
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
            </div>
            <p class="loading-text">Procesando...</p>
        </div>
    </div>
    
    <!-- Scripts -->
    <script src="~/js/app.js?v=@DateTime.Now.Ticks"></script>
    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Initialize theme and navigation
        document.addEventListener('DOMContentLoaded', function() {
            initializeTheme();
            initializeModernNavigation();
            // Load stats after a delay to avoid conflicts
            setTimeout(loadQuickStats, 500);
        });

        // Modern Navigation functionality
        function initializeModernNavigation() {
            // Initialize responsive navigation
            initializeResponsiveNavigation();

            // Initialize dropdowns (legacy support)
            initializeDropdowns();

            // Initialize mobile menu (legacy support)
            initializeMobileMenu();

            // Update connection status
            updateConnectionStatus();

            console.log('✅ Modern navigation initialized');
        }

        // Nueva Navegación Refactorizada
        function initializeResponsiveNavigation() {
            const header = document.getElementById('mainHeader');
            const mobileMenuBtn = document.getElementById('mobileMenuBtn');
            const mobileNav = document.getElementById('mobileNav');
            const mobileOverlay = document.getElementById('mobileOverlay');

            if (!header || !mobileMenuBtn || !mobileNav) {
                console.log('❌ Elementos de navegación refactorizada no encontrados');
                return;
            }

            console.log('🔍 Inicializando navegación refactorizada...');

            // Toggle navigation - FUNCIÓN PRINCIPAL
            mobileMenuBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🍔 Mobile menu button clickeado');

                const isOpen = document.body.classList.contains('mobile-nav-open');

                if (isOpen) {
                    closeMobileNavigation();
                } else {
                    openMobileNavigation();
                }
            });

            // Close navigation when clicking overlay
            if (mobileOverlay) {
                mobileOverlay.addEventListener('click', function() {
                    console.log('🔘 Mobile overlay clickeado - cerrando menú');
                    closeMobileNavigation();
                });
            }

            // Close navigation when clicking outside
            document.addEventListener('click', function(e) {
                if (!header.contains(e.target) &&
                    !mobileNav.contains(e.target) &&
                    document.body.classList.contains('mobile-nav-open')) {
                    console.log('🌐 Click fuera del menú móvil - cerrando');
                    closeMobileNavigation();
                }
            });

            // Close navigation on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && document.body.classList.contains('mobile-nav-open')) {
                    console.log('⌨️ Escape presionado - cerrando menú móvil');
                    closeMobileNavigation();
                }
            });

            // Close navigation on window resize to desktop
            window.addEventListener('resize', function() {
                if (window.innerWidth >= 1024 && document.body.classList.contains('mobile-nav-open')) {
                    console.log('📱➡️💻 Resize a desktop - cerrando menú móvil');
                    closeMobileNavigation();
                }
            });

            // Handle mobile navigation link clicks
            const mobileNavItems = mobileNav.querySelectorAll('.mobile-nav-item');
            mobileNavItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Close navigation on mobile when clicking a link
                    if (window.innerWidth < 1024) {
                        console.log('🔗 Mobile nav item clickeado - cerrando menú');
                        setTimeout(closeMobileNavigation, 150);
                    }
                });
            });

            function openMobileNavigation() {
                console.log('📂 Abriendo navegación móvil');
                document.body.classList.add('mobile-nav-open');
                mobileMenuBtn.setAttribute('aria-expanded', 'true');
                mobileNav.setAttribute('aria-hidden', 'false');

                // Prevent body scroll
                document.body.style.overflow = 'hidden';

                // Focus trap
                const firstFocusable = mobileNav.querySelector('a, button');
                if (firstFocusable) {
                    setTimeout(() => firstFocusable.focus(), 100);
                }
            }

            function closeMobileNavigation() {
                console.log('📁 Cerrando navegación móvil');
                document.body.classList.remove('mobile-nav-open');
                mobileMenuBtn.setAttribute('aria-expanded', 'false');
                mobileNav.setAttribute('aria-hidden', 'true');

                // Restore body scroll
                document.body.style.overflow = '';

                // Return focus to button
                mobileMenuBtn.focus();
            }

            console.log('✅ Navegación refactorizada inicializada correctamente');
        }

        // Logout confirmation - Refactorizado
        function confirmLogout(source = 'desktop') {
            if (confirm('¿Estás seguro que deseas cerrar sesión?')) {
                const formId = source === 'mobile' ? 'mobileLogoutForm' : 'logoutForm';
                const form = document.getElementById(formId);

                if (form) {
                    form.submit();
                } else {
                    // Fallback - crear form dinámico
                    const dynamicForm = document.createElement('form');
                    dynamicForm.method = 'post';
                    dynamicForm.action = '/logout';

                    // Add antiforgery token if available
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = token.value;
                        dynamicForm.appendChild(tokenInput);
                    }

                    document.body.appendChild(dynamicForm);
                    dynamicForm.submit();
                }
            }
        }

        // Dropdown functionality
        function initializeDropdowns() {
            const dropdowns = document.querySelectorAll('.nav-dropdown');

            dropdowns.forEach(dropdown => {
                const toggle = dropdown.querySelector('.dropdown-toggle');
                const menu = dropdown.querySelector('.dropdown-menu');

                if (toggle && menu) {
                    toggle.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        // Close other dropdowns
                        dropdowns.forEach(otherDropdown => {
                            if (otherDropdown !== dropdown) {
                                otherDropdown.classList.remove('active');
                            }
                        });

                        // Toggle current dropdown
                        dropdown.classList.toggle('active');
                    });
                }
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.nav-dropdown')) {
                    dropdowns.forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
            });

            // Close dropdowns on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    dropdowns.forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
            });
        }

        // Mobile menu functionality
        function initializeMobileMenu() {
            const mobileToggle = document.getElementById('mobileMenuToggle');
            const navMain = document.querySelector('.nav-main');
            const navUser = document.querySelector('.nav-user');

            if (mobileToggle) {
                mobileToggle.addEventListener('click', function(e) {
                    e.stopPropagation();
                    document.body.classList.toggle('mobile-menu-open');
                });
            }

            // Close mobile menu when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.modern-nav') && !e.target.closest('#mobileMenuToggle')) {
                    document.body.classList.remove('mobile-menu-open');
                }
            });

            // Close mobile menu on window resize to desktop
            window.addEventListener('resize', function() {
                if (window.innerWidth >= 768) {
                    document.body.classList.remove('mobile-menu-open');
                }
            });
        }

        function updateConnectionStatus() {
            // Simple online/offline status update
            if (navigator.onLine) {
                console.log('✅ Online');
            } else {
                console.log('⚠️ Offline');
            }
        }

        // Listen for online/offline events
        window.addEventListener('online', updateConnectionStatus);
        window.addEventListener('offline', updateConnectionStatus);

        // Global loadQuickStats function
        async function loadQuickStats() {
            try {
                const [students, classes, attendances] = await Promise.all([
                    fetch('/api/alumnos').then(r => r.ok ? r.json() : []),
                    fetch('/api/clases').then(r => r.ok ? r.json() : []),
                    fetch('/api/asistencias').then(r => r.ok ? r.json() : [])
                ]);

                // Calculate today's attendance safely
                const today = new Date().toDateString();
                const todayAttendance = attendances.filter(a => {
                    try {
                        return new Date(a.marcadaUtc).toDateString() === today;
                    } catch {
                        return false;
                    }
                }).length;

                // Update stats with safe values
                updateStatElement('totalStudents', Array.isArray(students) ? students.length : 0);
                updateStatElement('activeClasses', Array.isArray(classes) ? classes.filter(c => c && c.activa).length : 0);
                updateStatElement('todayAttendance', todayAttendance);

                console.log('✅ Quick stats loaded successfully');
            } catch (error) {
                console.error('❌ Error loading quick stats:', error);
                // Set safe default values
                updateStatElement('totalStudents', 0);
                updateStatElement('activeClasses', 0);
                updateStatElement('todayAttendance', 0);
            }
        }

        // Safe stat update function
        function updateStatElement(elementId, newValue) {
            const element = document.getElementById(elementId);
            if (!element) return;

            const currentValue = parseInt(element.textContent) || 0;
            const safeValue = Math.max(0, newValue || 0);

            if (currentValue !== safeValue) {
                element.textContent = safeValue;

                // Add a subtle flash effect
                element.style.color = 'var(--primary-color)';
                setTimeout(() => {
                    element.style.color = '';
                }, 300);
            }
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>