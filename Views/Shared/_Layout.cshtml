<!DOCTYPE html>
<html lang="es" class="theme-system">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - QuantumAttend</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <!-- Styles -->
    <link href="~/css/styles.css" rel="stylesheet" />
    <link href="~/css/modern-ui.css" rel="stylesheet" />
    
    <!-- Meta tags -->
    <meta name="theme-color" content="#0ea5e9">
    <meta name="description" content="Sistema de asistencia inteligente con QR avanzado">
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="quantum-body">
    <!-- Background effects -->
    <div class="quantum-bg">
        <div class="quantum-orbs">
            <div class="orb orb-1"></div>
            <div class="orb orb-2"></div>
            <div class="orb orb-3"></div>
        </div>
        <div class="quantum-mesh"></div>
    </div>
    
    <!-- Modern Navigation -->
    <nav class="modern-nav">
        <div class="nav-container">
            <!-- Brand -->
            <div class="nav-brand">
                <div class="brand-logo">
                    <i data-lucide="graduation-cap"></i>
                </div>
                <div class="brand-text">
                    <span class="brand-name">QuantumAttend</span>
                    <span class="brand-tagline">Sistema de Asistencia</span>
                </div>
            </div>

            @if (User.Identity?.IsAuthenticated == true)
            {
                <!-- Main Navigation -->
                <div class="nav-main">
                    <!-- Dashboard -->
                    <a href="/docente/dashboard" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Docente" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")" data-tooltip="Dashboard">
                        <i data-lucide="home"></i>
                        <span>Dashboard</span>
                    </a>

                    <!-- Crear Clase (Acción Principal) -->
                    <a href="/workflow/cursos" class="nav-item primary @(ViewContext.RouteData.Values["controller"]?.ToString() == "Workflow" ? "active" : "")" data-tooltip="Crear Nueva Clase">
                        <i data-lucide="plus"></i>
                        <span>Nueva Clase</span>
                    </a>

                    <!-- Dropdown: Gestión -->
                    <div class="nav-dropdown">
                        <button class="nav-item dropdown-toggle" data-tooltip="Gestionar">
                            <i data-lucide="folder"></i>
                            <span>Gestión</span>
                            <i data-lucide="chevron-down" class="dropdown-arrow"></i>
                        </button>
                        <div class="dropdown-menu">
                            <a href="/workflow/mis-clases" class="dropdown-item">
                                <i data-lucide="calendar-days"></i>
                                <span>Mis Clases</span>
                                <small>Ver todas las clases</small>
                            </a>
                            <a href="/docente/cursos" class="dropdown-item">
                                <i data-lucide="book-open"></i>
                                <span>Mis Cursos</span>
                                <small>Gestionar cursos</small>
                            </a>
                            <a href="/asistencias" class="dropdown-item">
                                <i data-lucide="users-check"></i>
                                <span>Asistencias</span>
                                <small>Ver reportes</small>
                            </a>
                            <div class="dropdown-divider"></div>
                            <a href="/workflow/qr-students" class="dropdown-item">
                                <i data-lucide="smartphone"></i>
                                <span>QR Estudiantes</span>
                                <small>Códigos para imprimir</small>
                            </a>
                        </div>
                    </div>

                    <!-- Escáner QR -->
                    <a href="/docente/scanner" class="nav-item scanner @(ViewContext.RouteData.Values["action"]?.ToString() == "Scanner" ? "active" : "")" data-tooltip="Escáner QR">
                        <i data-lucide="qr-code"></i>
                        <span>Escáner</span>
                    </a>
                </div>

                <!-- User Actions -->
                <div class="nav-user">
                    @if (User.IsInRole("Administrador"))
                    {
                        <a href="/dashboard" class="nav-item admin" data-tooltip="Panel Admin">
                            <i data-lucide="shield-check"></i>
                            <span>Admin</span>
                        </a>
                    }

                    <!-- User Menu -->
                    <div class="nav-dropdown user-dropdown">
                        <button class="nav-item user-trigger">
                            <div class="user-avatar">
                                <i data-lucide="user"></i>
                            </div>
                            <span class="user-name">@User.Identity.Name</span>
                            <i data-lucide="chevron-down" class="dropdown-arrow"></i>
                        </button>
                        <div class="dropdown-menu user-menu">
                            <div class="user-info">
                                <div class="user-avatar-large">
                                    <i data-lucide="user"></i>
                                </div>
                                <div class="user-details">
                                    <span class="user-name">@User.Identity.Name</span>
                                    <span class="user-role">Docente</span>
                                </div>
                            </div>
                            <div class="dropdown-divider"></div>
                            <a href="/perfil" class="dropdown-item">
                                <i data-lucide="settings"></i>
                                <span>Mi Perfil</span>
                            </a>
                            <a href="/ayuda" class="dropdown-item">
                                <i data-lucide="help-circle"></i>
                                <span>Ayuda</span>
                            </a>
                            <div class="dropdown-divider"></div>
                            <form method="post" action="/logout">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="dropdown-item logout">
                                    <i data-lucide="log-out"></i>
                                    <span>Cerrar Sesión</span>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Guest Navigation -->
                <div class="nav-guest">
                    <a href="/login" class="nav-item">
                        <i data-lucide="log-in"></i>
                        <span>Iniciar Sesión</span>
                    </a>
                    <a href="/register" class="nav-item">
                        <i data-lucide="user-plus"></i>
                        <span>Registrarse</span>
                    </a>
                </div>
            }

            <!-- Mobile Menu Toggle -->
            <button class="mobile-menu-toggle" id="mobileMenuToggle">
                <i data-lucide="menu"></i>
            </button>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="modern-main">
        @RenderBody()
    </main>

    <!-- Footer -->
    <footer class="modern-footer">
        <div class="footer-container">
            <div class="footer-content">
                <div class="footer-brand">
                    <div class="brand-logo">
                        <i data-lucide="graduation-cap"></i>
                    </div>
                    <div class="footer-text">
                        <h4>QuantumAttend</h4>
                        <p>Sistema de Asistencia Inteligente</p>
                    </div>
                </div>
                <div class="footer-links">
                    <a href="/ayuda" class="footer-link">
                        <i data-lucide="help-circle"></i>
                        <span>Ayuda</span>
                    </a>
                    <a href="/swagger" target="_blank" class="footer-link">
                        <i data-lucide="code"></i>
                        API Docs
                    </a>
                    <a href="/ayuda" class="footer-link">
                        <i data-lucide="help-circle"></i>
                        Ayuda
                    </a>
                </div>
            </div>
        </div>
    </footer>
    
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="globalLoader">
        <div class="loading-content">
            <div class="quantum-spinner">
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
            </div>
            <p class="loading-text">Procesando...</p>
        </div>
    </div>
    
    <!-- Scripts -->
    <script src="~/js/app.js?v=@DateTime.Now.Ticks"></script>
    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Initialize theme and navigation
        document.addEventListener('DOMContentLoaded', function() {
            initializeTheme();
            initializeModernNavigation();
            // Load stats after a delay to avoid conflicts
            setTimeout(loadQuickStats, 500);
        });

        // Modern Navigation functionality
        function initializeModernNavigation() {
            // Initialize dropdowns
            initializeDropdowns();

            // Initialize mobile menu
            initializeMobileMenu();

            // Update connection status
            updateConnectionStatus();

            console.log('✅ Modern navigation initialized');
        }

        // Dropdown functionality
        function initializeDropdowns() {
            const dropdowns = document.querySelectorAll('.nav-dropdown');

            dropdowns.forEach(dropdown => {
                const toggle = dropdown.querySelector('.dropdown-toggle');
                const menu = dropdown.querySelector('.dropdown-menu');

                if (toggle && menu) {
                    toggle.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        // Close other dropdowns
                        dropdowns.forEach(otherDropdown => {
                            if (otherDropdown !== dropdown) {
                                otherDropdown.classList.remove('active');
                            }
                        });

                        // Toggle current dropdown
                        dropdown.classList.toggle('active');
                    });
                }
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.nav-dropdown')) {
                    dropdowns.forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
            });

            // Close dropdowns on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    dropdowns.forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
            });
        }

        // Mobile menu functionality
        function initializeMobileMenu() {
            const mobileToggle = document.getElementById('mobileMenuToggle');
            const navMain = document.querySelector('.nav-main');
            const navUser = document.querySelector('.nav-user');

            if (mobileToggle) {
                mobileToggle.addEventListener('click', function(e) {
                    e.stopPropagation();
                    document.body.classList.toggle('mobile-menu-open');
                });
            }

            // Close mobile menu when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.modern-nav') && !e.target.closest('#mobileMenuToggle')) {
                    document.body.classList.remove('mobile-menu-open');
                }
            });

            // Close mobile menu on window resize to desktop
            window.addEventListener('resize', function() {
                if (window.innerWidth >= 768) {
                    document.body.classList.remove('mobile-menu-open');
                }
            });
        }

        function updateConnectionStatus() {
            // Simple online/offline status update
            if (navigator.onLine) {
                console.log('✅ Online');
            } else {
                console.log('⚠️ Offline');
            }
        }

        // Listen for online/offline events
        window.addEventListener('online', updateConnectionStatus);
        window.addEventListener('offline', updateConnectionStatus);

        // Global loadQuickStats function
        async function loadQuickStats() {
            try {
                const [students, classes, attendances] = await Promise.all([
                    fetch('/api/alumnos').then(r => r.ok ? r.json() : []),
                    fetch('/api/clases').then(r => r.ok ? r.json() : []),
                    fetch('/api/asistencias').then(r => r.ok ? r.json() : [])
                ]);

                // Calculate today's attendance safely
                const today = new Date().toDateString();
                const todayAttendance = attendances.filter(a => {
                    try {
                        return new Date(a.marcadaUtc).toDateString() === today;
                    } catch {
                        return false;
                    }
                }).length;

                // Update stats with safe values
                updateStatElement('totalStudents', Array.isArray(students) ? students.length : 0);
                updateStatElement('activeClasses', Array.isArray(classes) ? classes.filter(c => c && c.activa).length : 0);
                updateStatElement('todayAttendance', todayAttendance);

                console.log('✅ Quick stats loaded successfully');
            } catch (error) {
                console.error('❌ Error loading quick stats:', error);
                // Set safe default values
                updateStatElement('totalStudents', 0);
                updateStatElement('activeClasses', 0);
                updateStatElement('todayAttendance', 0);
            }
        }

        // Safe stat update function
        function updateStatElement(elementId, newValue) {
            const element = document.getElementById(elementId);
            if (!element) return;

            const currentValue = parseInt(element.textContent) || 0;
            const safeValue = Math.max(0, newValue || 0);

            if (currentValue !== safeValue) {
                element.textContent = safeValue;

                // Add a subtle flash effect
                element.style.color = 'var(--primary-color)';
                setTimeout(() => {
                    element.style.color = '';
                }, 300);
            }
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>