<!DOCTYPE html>
<html lang="es" class="theme-system">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - QuantumAttend</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <!-- Styles -->
    <link href="~/css/styles.css" rel="stylesheet" />
    
    <!-- Meta tags -->
    <meta name="theme-color" content="#0ea5e9">
    <meta name="description" content="Sistema de asistencia inteligente con QR avanzado">
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="quantum-body">
    <!-- Background effects -->
    <div class="quantum-bg">
        <div class="quantum-orbs">
            <div class="orb orb-1"></div>
            <div class="orb orb-2"></div>
            <div class="orb orb-3"></div>
        </div>
        <div class="quantum-mesh"></div>
    </div>
    
    <!-- Enhanced Navigation -->
    <nav class="quantum-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <div class="brand-icon">
                    <i data-lucide="zap"></i>
                </div>
                <div class="brand-text">
                    <h1>QuantumAttend</h1>
                    <span>Smart Attendance</span>
                </div>
            </div>
            
            <!-- Enhanced Navigation Menu -->
            <div class="nav-menu" id="navMenu">
                <a href="/" class="nav-link @(ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "active" : "")">
                    <i data-lucide="home"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/alumnos" class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Alumnos" ? "active" : "")">
                    <i data-lucide="users"></i>
                    <span>Estudiantes</span>
                </a>
                <a href="/clases" class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Clases" ? "active" : "")">
                    <i data-lucide="book-open"></i>
                    <span>Clases</span>
                </a>
                <a href="/asistencias" class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Asistencias" ? "active" : "")">
                    <i data-lucide="check-circle"></i>
                    <span>Asistencias</span>
                </a>
                <a href="/docente/scanner" class="nav-link scanner-link">
                    <i data-lucide="scan"></i>
                    <span>Scanner</span>
                </a>
            </div>
            
            <div class="nav-controls">
                <button class="nav-btn notification-btn" id="notificationBtn" title="Notificaciones">
                    <i data-lucide="bell"></i>
                    <span class="notification-badge" id="notificationCount">0</span>
                </button>
                
                <button class="nav-btn" id="themeToggle" title="Cambiar tema">
                    <i data-lucide="sun" class="theme-icon light-icon"></i>
                    <i data-lucide="moon" class="theme-icon dark-icon"></i>
                </button>
                
                <div class="nav-status">
                    <div class="status-indicator online" id="connectionStatus"></div>
                    <span class="status-text" id="connectionText">Online</span>
                </div>
                
                <!-- Mobile menu toggle -->
                <button class="nav-toggle" id="navToggle">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
            </div>
        </div>
    </nav>
    
    <!-- Main Header -->
    <header class="quantum-header">
        <div class="container">
            <div class="header-content">
                <div class="header-main">
                    <h1 class="page-title">@ViewData["Title"]</h1>
                    @if (ViewData["Subtitle"] != null)
                    {
                        <p class="page-subtitle">@ViewData["Subtitle"]</p>
                    }
                </div>
                
                <div class="header-actions">
                    <div class="quick-stats">
                        <div class="stat-item">
                            <i data-lucide="users"></i>
                            <span id="totalStudents">...</span>
                            <small>Estudiantes</small>
                        </div>
                        <div class="stat-item">
                            <i data-lucide="book-open"></i>
                            <span id="activeClasses">...</span>
                            <small>Clases Activas</small>
                        </div>
                        <div class="stat-item">
                            <i data-lucide="check-circle"></i>
                            <span id="todayAttendance">0</span>
                            <small>Asistencias Hoy</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    
    <!-- Main Content -->
    <main class="quantum-main">
        <div class="container">
            @RenderBody()
        </div>
    </main>
    
    <!-- Footer -->
    <footer class="quantum-footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-text">
                    <p>© 2025 QuantumAttend - Powered by AI & QR Technology</p>
                </div>
                <div class="footer-links">
                    <a href="/swagger" target="_blank" class="footer-link">
                        <i data-lucide="code"></i>
                        API Docs
                    </a>
                    <a href="#" class="footer-link">
                        <i data-lucide="help-circle"></i>
                        Ayuda
                    </a>
                </div>
            </div>
        </div>
    </footer>
    
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="globalLoader">
        <div class="loading-content">
            <div class="quantum-spinner">
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
                <div class="spinner-ring"></div>
            </div>
            <p class="loading-text">Procesando...</p>
        </div>
    </div>
    
    <!-- Scripts -->
    <script src="~/js/app.js"></script>
    <script>
        // Initialize Lucide icons
        lucide.createIcons();
        
        // Initialize theme and navigation
        document.addEventListener('DOMContentLoaded', function() {
            initializeTheme();
            initializeNavigation();
            // Load stats after a delay to avoid conflicts
            setTimeout(loadQuickStats, 500);
        });
        
        // Navigation functionality
        function initializeNavigation() {
            const navToggle = document.getElementById('navToggle');
            const navMenu = document.getElementById('navMenu');
            
            if (navToggle && navMenu) {
                navToggle.addEventListener('click', () => {
                    navMenu.classList.toggle('active');
                    navToggle.classList.toggle('active');
                });
                
                // Close menu when clicking outside
                document.addEventListener('click', (e) => {
                    if (!navToggle.contains(e.target) && !navMenu.contains(e.target)) {
                        navMenu.classList.remove('active');
                        navToggle.classList.remove('active');
                    }
                });
            }
            
            // Update connection status
            updateConnectionStatus();
            
            console.log('✅ Navigation initialized');
        }
        
        function updateConnectionStatus() {
            const statusIndicator = document.getElementById('connectionStatus');
            const statusText = document.getElementById('connectionText');
            
            if (navigator.onLine) {
                statusIndicator.className = 'status-indicator online';
                statusText.textContent = 'Online';
            } else {
                statusIndicator.className = 'status-indicator offline';
                statusText.textContent = 'Offline';
            }
        }
        
        // Listen for online/offline events
        window.addEventListener('online', updateConnectionStatus);
        window.addEventListener('offline', updateConnectionStatus);
        
        // Global loadQuickStats function
        async function loadQuickStats() {
            try {
                const [students, classes, attendances] = await Promise.all([
                    fetch('/api/alumnos').then(r => r.ok ? r.json() : []),
                    fetch('/api/clases').then(r => r.ok ? r.json() : []),
                    fetch('/api/asistencias').then(r => r.ok ? r.json() : [])
                ]);
                
                // Calculate today's attendance safely
                const today = new Date().toDateString();
                const todayAttendance = attendances.filter(a => {
                    try {
                        return new Date(a.marcadaUtc).toDateString() === today;
                    } catch {
                        return false;
                    }
                }).length;
                
                // Update stats with safe values
                updateStatElement('totalStudents', Array.isArray(students) ? students.length : 0);
                updateStatElement('activeClasses', Array.isArray(classes) ? classes.filter(c => c && c.activa).length : 0);
                updateStatElement('todayAttendance', todayAttendance);
                
                console.log('✅ Quick stats loaded successfully');
            } catch (error) {
                console.error('❌ Error loading quick stats:', error);
                // Set safe default values
                updateStatElement('totalStudents', 0);
                updateStatElement('activeClasses', 0);
                updateStatElement('todayAttendance', 0);
            }
        }
        
        // Safe stat update function to prevent loops
        function updateStatElement(elementId, newValue) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            const currentValue = parseInt(element.textContent) || 0;
            
            // Prevent negative values
            const safeValue = Math.max(0, newValue || 0);
            
            if (currentValue !== safeValue) {
                // Simple update without animation to avoid loops
                element.textContent = safeValue;
                
                // Add a subtle flash effect
                element.style.color = 'var(--primary)';
                setTimeout(() => {
                    element.style.color = '';
                }, 300);
            }
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>