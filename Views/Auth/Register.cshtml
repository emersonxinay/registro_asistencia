@model RegisterViewModel
@{
    ViewData["Title"] = "Registro de Docente";
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Registro Asistencia por QR</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        :root {
            --primary: #667eea;
            --primary-dark: #5a67d8;
            --secondary: #764ba2;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --text-muted: #9ca3af;
            --border: #e5e7eb;
            --surface: #ffffff;
            --background: #f9fafb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .register-container {
            background: var(--surface);
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            padding: 3rem;
            width: 100%;
            max-width: 500px;
            position: relative;
            overflow: hidden;
        }

        .register-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
        }

        .brand {
            text-align: center;
            margin-bottom: 2rem;
        }

        .brand-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            color: white;
            font-size: 1.5rem;
        }

        .brand-title {
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .brand-subtitle {
            color: var(--text-secondary);
            font-size: 0.95rem;
        }

        .register-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .register-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .register-subtitle {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            display: block;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .form-label.required::after {
            content: '*';
            color: var(--danger);
            margin-left: 0.25rem;
        }

        .input-wrapper {
            position: relative;
        }

        .form-input {
            width: 100%;
            padding: 0.875rem 1rem;
            padding-left: 3rem;
            border: 2px solid var(--border);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: var(--surface);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-input.valid {
            border-color: var(--success);
        }

        .form-input.invalid {
            border-color: var(--danger);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            width: 18px;
            height: 18px;
        }

        .form-input:focus + .input-icon {
            color: var(--primary);
        }

        .validation-icon {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            width: 18px;
            height: 18px;
        }

        .validation-icon.valid {
            color: var(--success);
        }

        .validation-icon.invalid {
            color: var(--danger);
        }

        .form-error {
            color: var(--danger);
            font-size: 0.8rem;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .form-success {
            color: var(--success);
            font-size: 0.8rem;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .password-strength {
            margin-top: 0.5rem;
        }

        .strength-bar {
            height: 4px;
            background: var(--border);
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .strength-fill {
            height: 100%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak { background: var(--danger); width: 25%; }
        .strength-fair { background: var(--warning); width: 50%; }
        .strength-good { background: var(--info); width: 75%; }
        .strength-strong { background: var(--success); width: 100%; }

        .strength-text {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .register-btn {
            width: 100%;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .register-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .register-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        .divider {
            text-align: center;
            margin: 2rem 0;
            position: relative;
            color: var(--text-muted);
            font-size: 0.9rem;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: var(--border);
            z-index: 1;
        }

        .divider span {
            background: var(--surface);
            padding: 0 1rem;
            position: relative;
            z-index: 2;
        }

        .login-link {
            text-align: center;
        }

        .login-link a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .login-link a:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }

        .back-home {
            text-align: center;
            margin-top: 1rem;
        }

        .back-home a {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            transition: color 0.3s ease;
        }

        .back-home a:hover {
            color: var(--text-secondary);
        }

        .alert {
            padding: 1rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            font-size: 0.9rem;
        }

        .alert-danger {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: #991b1b;
        }

        @@media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
                gap: 0;
            }
        }

        @@media (max-width: 480px) {
            .register-container {
                padding: 2rem;
                margin: 10px;
            }
            
            .brand-title {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="brand">
            <div class="brand-icon">
                <i data-lucide="zap"></i>
            </div>
            <h1 class="brand-title">Registro Asistencia por QR</h1>
            <p class="brand-subtitle">Sistema de Asistencia Inteligente</p>
        </div>

        <div class="register-header">
            <h2 class="register-title">Registro de Docente</h2>
            <p class="register-subtitle">Crea tu cuenta para acceder al sistema</p>
        </div>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <i data-lucide="alert-circle"></i>
                <div>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div>@error.ErrorMessage</div>
                    }
                </div>
            </div>
        }

        <form asp-controller="Auth" asp-action="Register" method="post" id="registerForm">
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label required" for="Nombre">Nombre Completo</label>
                    <div class="input-wrapper">
                        <input type="text" id="Nombre" name="Nombre" class="form-input" 
                               placeholder="Juan Pérez" required autofocus value="@Model?.Nombre">
                        <i data-lucide="user" class="input-icon"></i>
                        <div class="validation-icon hidden" id="nombreValidation"></div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label required" for="CodigoDocente">Código de Docente</label>
                    <div class="input-wrapper">
                        <input type="text" id="CodigoDocente" name="CodigoDocente" class="form-input" 
                               placeholder="DOC001" required value="@Model?.CodigoDocente">
                        <i data-lucide="id-card" class="input-icon"></i>
                        <div class="validation-icon hidden" id="codigoValidation"></div>
                    </div>
                </div>
            </div>

            <div class="form-group full-width">
                <label class="form-label required" for="Email">Email Institucional</label>
                <div class="input-wrapper">
                    <input type="email" id="Email" name="Email" class="form-input" 
                           placeholder="tu.email@universidad.edu" required value="@Model?.Email">
                    <i data-lucide="mail" class="input-icon"></i>
                    <div class="validation-icon hidden" id="emailValidation"></div>
                </div>
            </div>

            <div class="form-group full-width">
                <label class="form-label" for="Departamento">Departamento (Opcional)</label>
                <div class="input-wrapper">
                    <input type="text" id="Departamento" name="Departamento" class="form-input" 
                           placeholder="Ingeniería, Matemáticas, etc." value="@Model?.Departamento">
                    <i data-lucide="building" class="input-icon"></i>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label required" for="Password">Contraseña</label>
                    <div class="input-wrapper">
                        <input type="password" id="Password" name="Password" class="form-input" 
                               placeholder="Mínimo 6 caracteres" required>
                        <i data-lucide="lock" class="input-icon"></i>
                        <div class="validation-icon hidden" id="passwordValidation"></div>
                    </div>
                    <div class="password-strength" id="passwordStrength" style="display: none;">
                        <div class="strength-bar">
                            <div class="strength-fill" id="strengthFill"></div>
                        </div>
                        <div class="strength-text" id="strengthText"></div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label required" for="ConfirmPassword">Confirmar Contraseña</label>
                    <div class="input-wrapper">
                        <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-input" 
                               placeholder="Repite la contraseña" required>
                        <i data-lucide="shield-check" class="input-icon"></i>
                        <div class="validation-icon hidden" id="confirmValidation"></div>
                    </div>
                </div>
            </div>

            <button type="submit" class="register-btn" id="registerBtn">
                <i data-lucide="user-plus"></i>
                Crear Cuenta
            </button>
        </form>

        <div class="divider">
            <span>¿Ya tienes cuenta?</span>
        </div>

        <div class="login-link">
            <a href="/login">Iniciar Sesión</a>
        </div>

        <div class="back-home">
            <a href="/">
                <i data-lucide="arrow-left"></i>
                Volver al inicio
            </a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Lucide icons
            if (window.lucide) {
                lucide.createIcons();
            }

            // Form elements
            const form = document.getElementById('registerForm');
            const btn = document.getElementById('registerBtn');
            const emailInput = document.getElementById('Email');
            const codigoInput = document.getElementById('CodigoDocente');
            const passwordInput = document.getElementById('Password');
            const confirmInput = document.getElementById('ConfirmPassword');

            // Validation functions
            async function validateEmail() {
                const email = emailInput.value.trim();
                const validation = document.getElementById('emailValidation');
                
                if (!email) {
                    hideValidation('emailValidation');
                    return false;
                }

                if (!isValidEmail(email)) {
                    showValidation('emailValidation', 'invalid', 'x');
                    emailInput.classList.add('invalid');
                    emailInput.classList.remove('valid');
                    return false;
                }

                try {
                    const response = await fetch(`/api/auth/check-email?email=${encodeURIComponent(email)}`);
                    const data = await response.json();
                    
                    if (data.exists) {
                        showValidation('emailValidation', 'invalid', 'x');
                        emailInput.classList.add('invalid');
                        emailInput.classList.remove('valid');
                        return false;
                    } else {
                        showValidation('emailValidation', 'valid', 'check');
                        emailInput.classList.add('valid');
                        emailInput.classList.remove('invalid');
                        return true;
                    }
                } catch {
                    hideValidation('emailValidation');
                    return false;
                }
            }

            async function validateCodigo() {
                const codigo = codigoInput.value.trim();
                
                if (!codigo) {
                    hideValidation('codigoValidation');
                    return false;
                }

                try {
                    const response = await fetch(`/api/auth/check-codigo?codigo=${encodeURIComponent(codigo)}`);
                    const data = await response.json();
                    
                    if (data.exists) {
                        showValidation('codigoValidation', 'invalid', 'x');
                        codigoInput.classList.add('invalid');
                        codigoInput.classList.remove('valid');
                        return false;
                    } else {
                        showValidation('codigoValidation', 'valid', 'check');
                        codigoInput.classList.add('valid');
                        codigoInput.classList.remove('invalid');
                        return true;
                    }
                } catch {
                    hideValidation('codigoValidation');
                    return false;
                }
            }

            function validatePassword() {
                const password = passwordInput.value;
                const strength = calculatePasswordStrength(password);
                
                updatePasswordStrength(strength);
                
                if (password.length >= 6) {
                    showValidation('passwordValidation', 'valid', 'check');
                    passwordInput.classList.add('valid');
                    passwordInput.classList.remove('invalid');
                    return true;
                } else {
                    showValidation('passwordValidation', 'invalid', 'x');
                    passwordInput.classList.add('invalid');
                    passwordInput.classList.remove('valid');
                    return false;
                }
            }

            function validateConfirmPassword() {
                const password = passwordInput.value;
                const confirm = confirmInput.value;
                
                if (!confirm) {
                    hideValidation('confirmValidation');
                    return false;
                }

                if (password === confirm) {
                    showValidation('confirmValidation', 'valid', 'check');
                    confirmInput.classList.add('valid');
                    confirmInput.classList.remove('invalid');
                    return true;
                } else {
                    showValidation('confirmValidation', 'invalid', 'x');
                    confirmInput.classList.add('invalid');
                    confirmInput.classList.remove('valid');
                    return false;
                }
            }

            // Helper functions
            function showValidation(elementId, type, icon) {
                const element = document.getElementById(elementId);
                element.className = `validation-icon ${type}`;
                element.innerHTML = `<i data-lucide="${icon}"></i>`;
                element.classList.remove('hidden');
                lucide.createIcons();
            }

            function hideValidation(elementId) {
                const element = document.getElementById(elementId);
                element.classList.add('hidden');
            }

            function isValidEmail(email) {
                const re = new RegExp('^[^\\s@@]+@@[^\\s@@]+\\.[^\\s@@]+$');
                return re.test(email);
            }

            function calculatePasswordStrength(password) {
                let score = 0;
                if (!password) return score;

                // Award every unique letter until 5 repetitions
                const letters = {};
                for (let i = 0; i < password.length; i++) {
                    letters[password[i]] = (letters[password[i]] || 0) + 1;
                    score += 5.0 / letters[password[i]];
                }

                // Bonus points for mixing it up
                const variations = {
                    digits: /\d/.test(password),
                    lower: /[a-z]/.test(password),
                    upper: /[A-Z]/.test(password),
                    nonWords: /\W/.test(password),
                };

                let variationCount = 0;
                for (let variation in variations) {
                    variationCount += variations[variation] ? 1 : 0;
                }
                score += (variationCount - 1) * 10;

                return Math.min(100, Math.max(0, score));
            }

            function updatePasswordStrength(score) {
                const strengthEl = document.getElementById('passwordStrength');
                const fillEl = document.getElementById('strengthFill');
                const textEl = document.getElementById('strengthText');

                if (passwordInput.value.length === 0) {
                    strengthEl.style.display = 'none';
                    return;
                }

                strengthEl.style.display = 'block';

                let className, text;
                if (score < 25) {
                    className = 'strength-weak';
                    text = 'Muy débil';
                } else if (score < 50) {
                    className = 'strength-fair';
                    text = 'Débil';
                } else if (score < 75) {
                    className = 'strength-good';
                    text = 'Buena';
                } else {
                    className = 'strength-strong';
                    text = 'Muy fuerte';
                }

                fillEl.className = `strength-fill ${className}`;
                textEl.textContent = text;
            }

            // Event listeners
            let emailTimeout, codigoTimeout;

            emailInput.addEventListener('input', function() {
                clearTimeout(emailTimeout);
                emailTimeout = setTimeout(validateEmail, 500);
            });

            codigoInput.addEventListener('input', function() {
                clearTimeout(codigoTimeout);
                codigoTimeout = setTimeout(validateCodigo, 500);
            });

            passwordInput.addEventListener('input', validatePassword);
            confirmInput.addEventListener('input', validateConfirmPassword);

            // Form submission
            form.addEventListener('submit', function() {
                btn.disabled = true;
                btn.innerHTML = '<div class="loading-spinner"></div> Creando cuenta...';
            });
        });
    </script>
</body>
</html>